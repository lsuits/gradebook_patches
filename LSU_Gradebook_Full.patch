diff --git a/admin/settings/grades.php b/admin/settings/grades.php
index 90bc811..c95c5fd 100644
--- a/admin/settings/grades.php
+++ b/admin/settings/grades.php
@@ -23,6 +23,10 @@ if (has_capability('moodle/grade:manage', $systemcontext)
     $temp = new admin_settingpage('gradessettings', new lang_string('generalsettings', 'grades'), 'moodle/grade:manage');
     if ($ADMIN->fulltree) {
 
+        // BEGIN LSU Course Category Editable Patch
+        $temp->add(new admin_setting_configcheckbox('grade_coursecateditable', new lang_string('coursecateditable', 'grades'), new lang_string('coursecateditable_help', 'grades'), 1));
+        // END LSU Course Category Editable Patch
+
         // new CFG variable for gradebook (what roles to display)
         $temp->add(new admin_setting_special_gradebookroles());
 
@@ -185,9 +189,36 @@ if (has_capability('moodle/grade:manage', $systemcontext)
         $outcomes = new admin_externalpage('outcomes', new lang_string('outcomes', 'grades'), $CFG->wwwroot.'/grade/edit/outcome/index.php', 'moodle/grade:manage');
         $ADMIN->add('grades', $outcomes);
     }
-    $letters = new admin_externalpage('letters', new lang_string('letters', 'grades'), $CFG->wwwroot.'/grade/edit/letter/index.php', 'moodle/grade:manageletters');
+
+    // BEGIN LSU Better Letter Grades
+    $letters_str = new lang_string('letters', 'grades');
+    $letters_base = $CFG->wwwroot.'/grade/edit/letter';
+    $letters = new admin_externalpage('letters', $letters_str, $letters_base . '/index.php', 'moodle/grade:manageletters');
+    // END LSU Better Letter Grades
+
     $ADMIN->add('grades', $letters);
 
+    // BEGIN LSU Better Letter Grades
+    $letters_settings_str = new lang_string('letter', 'grades') . ' ' . new lang_string('edit') . ' ' . new lang_string('settings');
+    $temp = new admin_settingpage('letterssettings', $letters_settings_str, 'moodle/grade:manageletters');
+    if ($ADMIN->fulltree) {
+        $temp->add(new admin_setting_configcheckbox('grade_letters_strict',
+            new lang_string('lettersstrictletter', 'grades'), new lang_string('lettersstrictletter_help', 'grades'), 0));
+
+        $params = array('courseid' => 0);
+
+        $db_scales = $DB->get_records_menu('scale', $params, '', 'id, name');
+
+        $scales = array(0 => new lang_string('lettersdefaultletters', 'grades')) + $db_scales;
+
+        $temp->add(new admin_setting_configselect('grade_letters_names',
+            new lang_string('lettersnames', 'grades'),
+            new lang_string('lettersname_help', 'grades'), 0, $scales));
+    }
+
+    $ADMIN->add('grades', $temp);
+    // END LSU Better Letter Grades
+
     // The plugins must implement a settings.php file that adds their admin settings to the $settings object
 
     // Reports
diff --git a/grade/edit/letter/edit_form.php b/grade/edit/letter/edit_form.php
index ae103fb..f5018ff 100644
--- a/grade/edit/letter/edit_form.php
+++ b/grade/edit/letter/edit_form.php
@@ -31,6 +31,10 @@ require_once $CFG->libdir.'/formslib.php';
 class edit_letter_form extends moodleform {
 
     public function definition() {
+	// BEGIN LSU Better Letters
+	global $DB;
+	// END LSU Better Letters
+
         $mform =& $this->_form;
         $num   = $this->_customdata['num'];
         $admin = $this->_customdata['admin'];
@@ -46,16 +50,37 @@ class edit_letter_form extends moodleform {
         $gradeletter       = get_string('gradeletter', 'grades');
         $gradeboundary     = get_string('gradeboundary', 'grades');
 
+        // BEGIN LSU Better Letters
+        $strict = get_config('moodle', 'grade_letters_strict');
+
+        $default = get_config('moodle', 'grade_letters_names');
+
+        if ($default and $scale = $DB->get_record('scale', array('id' => $default))) {
+            $default_letters = $scale->scale;
+        } else {
+           $default_letters = get_string('lettersdefaultletters', 'grades');
+        }
+
+        $default_letters = array_reverse(explode(',', $default_letters));
+        $letters = array('' => get_string('unused', 'grades')) +
+            array_combine($default_letters, $default_letters);
+        // END LSU Better Letters
+
         for ($i=1; $i<$num+1; $i++) {
             $gradelettername = 'gradeletter'.$i;
             $gradeboundaryname = 'gradeboundary'.$i;
 
             $entry = array();
-            $entry[] = $mform->createElement('text', $gradelettername, $gradeletter . " $i");
+            if ($strict) {
+                $entry[] = $mform->createElement('select', $gradelettername, $gradeletter . " $i", $letters);
+            } else {
+                $entry[] = $mform->createElement('text', $gradelettername, $gradeletter . " $i");
+            }
             $mform->setType($gradelettername, PARAM_TEXT);
 
             if (!$admin) {
                 $mform->disabledIf($gradelettername, 'override', 'notchecked');
+                $mform->disabledIf($gradelettername, $gradeboundaryname, 'eq', -1);
             }
 
             $entry[] = $mform->createElement('static', '', '', '&ge;');
diff --git a/grade/edit/letter/index.php b/grade/edit/letter/index.php
index 025584b..b20577e 100644
--- a/grade/edit/letter/index.php
+++ b/grade/edit/letter/index.php
@@ -46,6 +46,10 @@ if (!$edit) {
 
 $returnurl = null;
 $editparam = null;
+$custom = true;
+$decimals = $custom ? (int) get_config('moodle', 'grade_decimalpoints') : 2;
+
+
 if ($context->contextlevel == CONTEXT_SYSTEM or $context->contextlevel == CONTEXT_COURSECAT) {
     require_once $CFG->libdir.'/adminlib.php';
     require_login();
@@ -86,11 +90,11 @@ if (!$edit) {
     $max = 100;
     foreach($letters as $boundary=>$letter) {
         $line = array();
-        $line[] = format_float($max,2).' %';
-        $line[] = format_float($boundary,2).' %';
+        $line[] = format_float($max, $decimals).' %';
+        $line[] = format_float($boundary, $decimals).' %';
         $line[] = format_string($letter);
         $data[] = $line;
-        $max = $boundary - 0.01;
+        $max = $boundary - (1 / pow(10, $decimals));
     }
 
     print_grade_page_head($COURSE->id, 'letter', 'view', get_string('gradeletters', 'grades'));
@@ -106,9 +110,9 @@ if (!$edit) {
     $table = new html_table();
     $table->id = 'grade-letters-view';
     $table->head  = array(get_string('max', 'grades'), get_string('min', 'grades'), get_string('letter', 'grades'));
-    $table->size  = array('30%', '30%', '40%');
+    $table->size  = array('33%', '33%', '34%');
     $table->align = array('left', 'left', 'left');
-    $table->width = '30%';
+    $table->width = '40%';
     $table->data  = $data;
     $table->tablealign  = 'center';
     echo html_writer::table($table);
@@ -125,8 +129,11 @@ if (!$edit) {
         $gradelettername = 'gradeletter'.$i;
         $gradeboundaryname = 'gradeboundary'.$i;
 
+
         $data->$gradelettername   = $letter;
         $data->$gradeboundaryname = $boundary;
+        $stored = "{$data->$gradeboundaryname}";
+        $letters[$stored] = $letter;
         $i++;
     }
     $data->override = $override;
diff --git a/grade/edit/tree/category_form.php b/grade/edit/tree/category_form.php
index 98a18a4..97b0844 100644
--- a/grade/edit/tree/category_form.php
+++ b/grade/edit/tree/category_form.php
@@ -391,7 +391,17 @@ class edit_category_form extends moodleform {
 
             // If it is a course category and its fullname is ?, show an empty field
             if ($grade_category->is_course_category() && $mform->getElementValue('fullname') == '?') {
-                $mform->setDefault('fullname', '');
+                // BEGIN LSU Course Category Editable Patch
+                $editable = (bool) get_config('moodle', 'grade_coursecateditable');
+
+                // If it is a course category and its fullname is ?, show an editable empty field
+                if ($editable && $mform->getElementValue('fullname') == '?') {
+                    $mform->setDefault('fullname', '');
+                } else if (!$editable) {
+                    $mform->setDefault('fullname', $COURSE->fullname);
+                    $mform->hardFreeze('fullname');
+                }
+                // END LSU Course Category Editable Patch
             }
             // remove unwanted aggregation options
             if ($mform->elementExists('aggregation')) {
diff --git a/grade/edit/tree/item.php b/grade/edit/tree/item.php
index 7ee5cbe..1e891cc 100644
--- a/grade/edit/tree/item.php
+++ b/grade/edit/tree/item.php
@@ -176,6 +176,10 @@ if ($mform->is_cancelled()) {
         }
 
     } else {
+           $ec_test = isset($data->extracred);
+           if ($ec_test == 1) {
+               $grade_item->aggregationcoef = abs($grade_item->aggregationcoef) * -1;
+           }
         $grade_item->update();
 
         if (!empty($data->rescalegrades) && $data->rescalegrades == 'yes') {
diff --git a/grade/edit/tree/item_form.php b/grade/edit/tree/item_form.php
index 572faa3..d3eedad 100644
--- a/grade/edit/tree/item_form.php
+++ b/grade/edit/tree/item_form.php
@@ -347,7 +347,7 @@ class edit_item_form extends moodleform {
                 $coefstring = $grade_item->get_coefstring();
 
                 if ($coefstring !== '') {
-                    if ($coefstring == 'aggregationcoefextrasum' || $coefstring == 'aggregationcoefextraweightsum') {
+                    if ($coefstring == 'aggregationcoefextrasum' || ($coefstring == 'aggregationcoefweight' && $grade_item->aggregationcoef < 0) || $coefstring == 'aggregationcoefextraweightsum') {
                         // advcheckbox is not compatible with disabledIf!
                         $coefstring = 'aggregationcoefextrasum';
                         $element =& $mform->createElement('checkbox', 'aggregationcoef', get_string($coefstring, 'grades'));
@@ -361,6 +361,7 @@ class edit_item_form extends moodleform {
                     }
                     $mform->addHelpButton('aggregationcoef', $coefstring, 'grades');
                 }
+                $mform->disabledIf('aggregationcoef', 'weightoverride');
                 $mform->disabledIf('aggregationcoef', 'gradetype', 'eq', GRADE_TYPE_NONE);
                 $mform->disabledIf('aggregationcoef', 'gradetype', 'eq', GRADE_TYPE_TEXT);
                 $mform->disabledIf('aggregationcoef', 'parentcategory', 'eq', $parent_category->id);
@@ -370,11 +371,27 @@ class edit_item_form extends moodleform {
             // Or if the item is a scale and scales are not used in aggregation.
             if ($parent_category->aggregation != GRADE_AGGREGATE_SUM
                     || (empty($CFG->grade_includescalesinaggregation) && $grade_item->gradetype == GRADE_TYPE_SCALE)) {
-                if ($mform->elementExists('weightoverride')) {
-                    $mform->removeElement('weightoverride');
+                if ($parent_category->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN && $grade_item->aggregationcoef >= 0) {
+                    if ($mform->elementExists('aggregationcoef2')) {
+                        $mform->removeElement('aggregationcoef2');
+                    }
+                    $mform->addElement('checkbox', 'extracred', get_string('aggregationcoefextrasum', 'grades'));
+                } else {
+                    if ($mform->elementExists('weightoverride')) {
+                        $mform->removeElement('weightoverride');
+                    }
+                    if ($mform->elementExists('aggregationcoef2')) {
+                        $mform->removeElement('aggregationcoef2');
+                    }
                 }
-                if ($mform->elementExists('aggregationcoef2')) {
-                    $mform->removeElement('aggregationcoef2');
+            } else if ($parent_category->aggregation == GRADE_AGGREGATE_SUM) { 
+                if ($grade_item->weightoverride == 1) {
+                    if ($mform->elementExists('weightoverride')) {
+                        $mform->removeElement('weightoverride');
+                    }
+                    if ($mform->elementExists('aggregationcoef2')) {
+                        $mform->removeElement('aggregationcoef2');
+                    }
                 }
             }
 
diff --git a/grade/edit/tree/lib.php b/grade/edit/tree/lib.php
index bf4a4a6..4bdd652 100644
--- a/grade/edit/tree/lib.php
+++ b/grade/edit/tree/lib.php
@@ -392,11 +392,17 @@ class grade_edit_tree {
         $str = '';
 
         if ($aggcoef == 'aggregationcoefweight' || $aggcoef == 'aggregationcoef' || $aggcoef == 'aggregationcoefextraweight') {
+
+            if ($aggcoef == 'aggregationcoefweight' && $item->aggregationcoef < 0) {
+                $ec = get_string('aggregationhintextra', 'grades');
+                return $ec;
+            }
+
             return '<label class="accesshide" for="weight_'.$item->id.'">'.
                 get_string('extracreditvalue', 'grades', $itemname).'</label>'.
                 '<input type="text" size="6" id="weight_'.$item->id.'" name="weight_'.$item->id.'"
                 value="'.grade_edit_tree::format_number($item->aggregationcoef).'" />';
-        } else if ($aggcoef == 'aggregationcoefextraweightsum') {
+        } else if ($aggcoef == 'aggregationcoefextraweightsum' || $aggcoef == 'aggregationcoefweight') {
 
             $checkboxname = 'weightoverride_' . $item->id;
             $checkboxlbl = html_writer::tag('label', get_string('overrideweightofa', 'grades', $itemname),
@@ -530,6 +536,7 @@ class grade_edit_tree {
             if ($coefstring == 'aggregationcoefweight' || $coefstring == 'aggregationcoefextraweightsum' ||
                     $coefstring == 'aggregationcoefextraweight') {
                 $this->uses_weight = true;
+                $this->uses_extra_credit = true;
             }
 
             foreach($element['children'] as $child_el) {
@@ -707,6 +714,11 @@ class grade_edit_tree_column_weight extends grade_edit_tree_column {
         $item = $category->get_grade_item();
         $categorycell = parent::get_category_cell($category, $levelclass, $params);
         $categorycell->text = grade_edit_tree::get_weight_input($item);
+        $parent_cat = $item->load_parent_category();
+        $grandparent_cat = $parent_cat->load_parent_category();
+        if (($parent_cat->aggregation == GRADE_AGGREGATE_SUM && $grandparent_cat->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN && $item->aggregationcoef == 1 && ($item->aggregationcoef2 == 0 || $item->weightoverride == 1))) {
+            $categorycell->text = get_string('aggregationhintextra', 'grades');
+        }
         return $categorycell;
     }
 
@@ -726,6 +738,16 @@ class grade_edit_tree_column_weight extends grade_edit_tree_column {
             $itemcell->text = grade_edit_tree::get_weight_input($item);
         }
 
+        $parent_cat = $object->load_parent_category();
+        $grandparent_cat = $parent_cat->load_parent_category();
+        if ($parent_cat->aggregation == GRADE_AGGREGATE_SUM && $object->itemtype != 'category' && $item->aggregationcoef == 1 && ($item->aggregationcoef2 == 0 || $item->weightoverride == 1)) {
+            $itemcell->text = get_string('aggregationhintextra', 'grades');
+        }
+
+        if ($parent_cat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN2 && $item->aggregationcoef == 1) {
+            $itemcell->text = get_string('aggregationhintextra', 'grades');
+        }
+
         return $itemcell;
     }
 }
@@ -782,16 +804,20 @@ class grade_edit_tree_column_range extends grade_edit_tree_column {
             // The parent is just category the grade item represents.
             if ($item->is_category_item()) {
                 $grandparentcat = $parentcat->get_parent_category();
-                if ($grandparentcat->is_extracredit_used()) {
+                if ($grandparentcat->is_extracredit_used() && $grandparentcat->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN) {
                     $isextracredit = true;
                 }
-            } else if ($parentcat->is_extracredit_used()) {
+            } else if ($parentcat->is_extracredit_used() && $parentcat->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN) {
                 $isextracredit = true;
             }
+        } else if ($parentcat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN && $item->aggregationcoef < 0) {
+            $isextracredit = true;
+        } else if ($item->aggregationcoef < 0) {
+            $isextracredit = true;
         }
         if ($isextracredit) {
             $grademax .= ' ' . html_writer::tag('abbr', get_string('aggregationcoefextrasumabbr', 'grades'),
-                array('title' => get_string('aggregationcoefextrasum', 'grades')));
+                array('title' => get_string('aggregationhintextra', 'grades')));
         }
 
         $itemcell = parent::get_item_cell($item, $params);
diff --git a/grade/report/grader/lib.php b/grade/report/grader/lib.php
index 18e7c16..adebe56 100644
--- a/grade/report/grader/lib.php
+++ b/grade/report/grader/lib.php
@@ -1468,6 +1468,10 @@ class grade_report_grader extends grade_report {
                 }
             }
 
+            // BEGIN LSU Column Average No Zero
+            $no_grade_SQL = $meanselection == 2 ? ' AND g.finalgrade > 0 ': '';
+            // END LSU Column Average No Zero
+
             // MDL-10875 Empty grades must be evaluated as grademin, NOT always 0
             // This query returns a count of ungraded grades (NULL finalgrade OR no matching record in grade_grades table)
             $sql = "SELECT gi.id, COUNT(DISTINCT u.id) AS count
@@ -1478,7 +1482,7 @@ class grade_report_grader extends grade_report {
                       JOIN {role_assignments} ra
                            ON ra.userid = u.id
                       LEFT OUTER JOIN {grade_grades} g
-                           ON (g.itemid = gi.id AND g.userid = u.id AND g.finalgrade IS NOT NULL)
+                           ON (g.itemid = gi.id AND g.userid = u.id AND (g.finalgrade IS NOT NULL $no_grade_SQL))
                       $groupsql
                      WHERE gi.courseid = :courseid
                            AND ra.roleid $gradebookrolessql
@@ -1514,7 +1518,7 @@ class grade_report_grader extends grade_report {
                     $ungradedcount = $ungradedcounts[$itemid]->count;
                 }
 
-                if ($meanselection == GRADE_REPORT_MEAN_GRADED) {
+                if (($meanselection == GRADE_REPORT_MEAN_GRADED) || ($meanselection == GRADE_REPORT_MEAN_GRADED_NO_ZEROS)) {
                     $meancount = $totalcount - $ungradedcount;
                 } else { // Bump up the sum by the number of ungraded items * grademin
                     $sumarray[$item->id] += $ungradedcount * $item->grademin;
diff --git a/grade/report/grader/preferences_form.php b/grade/report/grader/preferences_form.php
index 241adf6..5ea74f8 100644
--- a/grade/report/grader/preferences_form.php
+++ b/grade/report/grader/preferences_form.php
@@ -86,7 +86,8 @@ class grader_report_preferences_form extends moodleform {
                                                                           0=>0, 1=>1, 2=>2, 3=>3, 4=>4, 5=>5);
                 $preferences['prefrows']['meanselection']  = array(GRADE_REPORT_PREFERENCE_DEFAULT => '*default*',
                                                                    GRADE_REPORT_MEAN_ALL => get_string('meanall', 'grades'),
-                                                                   GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'));
+                                                                   GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'),
+                                                                   GRADE_REPORT_MEAN_GRADED_NO_ZEROS => get_string('meangradednozeros', 'grades'));
 
                 $advanced = array_merge($advanced, array('averagesdisplaytype', 'averagesdecimalpoints'));
             }
diff --git a/grade/report/grader/settings.php b/grade/report/grader/settings.php
index 300543a..7a8ab48 100644
--- a/grade/report/grader/settings.php
+++ b/grade/report/grader/settings.php
@@ -47,7 +47,8 @@ if ($ADMIN->fulltree) {
     $settings->add(new admin_setting_configselect('grade_report_meanselection', get_string('meanselection', 'grades'),
                                               get_string('meanselection_help', 'grades'), GRADE_REPORT_MEAN_GRADED,
                                               array(GRADE_REPORT_MEAN_ALL => get_string('meanall', 'grades'),
-                                                    GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'))));
+                                                    GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'),
+                                                    GRADE_REPORT_MEAN_GRADED_NO_ZEROS => get_string('meangradednozeros', 'grades'))));
 
     $settings->add(new admin_setting_configcheckbox('grade_report_enableajax', get_string('enableajax', 'grades'),
                                                 get_string('enableajax_help', 'grades'), 0));
diff --git a/grade/report/user/lib.php b/grade/report/user/lib.php
index 65f66a6..4c64e92 100644
--- a/grade/report/user/lib.php
+++ b/grade/report/user/lib.php
@@ -514,8 +514,34 @@ class grade_report_user extends grade_report {
                     if (is_numeric($hint['weight'])) {
                         $data['weight']['content'] = format_float($hint['weight'] * 100.0, 2) . ' %';
                     }
-                    if ($hint['status'] != 'used' && $hint['status'] != 'unknown') {
-                        $data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
+                    $gradecat = $grade_object->load_parent_category();
+                    $grandcat = $gradecat->load_parent_category();
+                    if (($gradecat->aggregation == GRADE_AGGREGATE_SUM) && $grade_object->itemtype != 'category') {
+                        if ($hint['status'] != 'used' && $hint['status'] != 'unknown') {
+                            $data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
+                        }
+                        if ($hint['status'] == 'extra') {
+                            $data['weight']['content'] = get_string('aggregationhintextra', 'grades');
+                        }
+                    } 
+                    if ($gradecat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN) {
+                        if ($hint['status'] == 'used') {
+                            $data['weight']['content'] = get_string('aggregationhintextra', 'grades');
+                        }
+                        if ($hint['status'] == 'novalue') {
+                            $data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
+                        }
+                    }
+                    if ($gradecat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN2 && $grade_object->aggregationcoef == 1) {
+                        if ($hint['status'] != 'used' && $hint['status'] != 'unknown') {
+                            $data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
+                        }
+                        if ($hint['status'] == 'extra') {
+                            $data['weight']['content'] = get_string('aggregationhintextra', 'grades');
+                        }
+                    }
+                    if (($gradecat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN || $grandcat->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN) && $grade_object->itemtype == 'category' && $grade_object->aggregationcoef < 0) {
+                            $data['weight']['content'] = get_string('aggregationhintextra', 'grades');
                     }
                 }
 
diff --git a/lang/en/grades.php b/lang/en/grades.php
index 584bf4c..1a5b3ce 100644
--- a/lang/en/grades.php
+++ b/lang/en/grades.php
@@ -456,6 +456,7 @@ $string['max'] = 'Highest';
 $string['maxgrade'] = 'Max grade';
 $string['meanall'] = 'All grades';
 $string['meangraded'] = 'Non-empty grades';
+$string['meangradednozeros'] = 'Non-empty, non-zero grades';
 $string['meanselection'] = 'Grades selected for column averages';
 $string['meanselection_help'] = 'This setting determines whether cells with no grade should be included when calculating the average (mean) for each category or grade item.';
 $string['median'] = 'Median';
@@ -813,6 +814,18 @@ $string['writinggradebookinfo'] = 'Writing gradebook settings';
 $string['xml'] = 'XML';
 $string['yes'] = 'Yes';
 $string['yourgrade'] = 'Your grade';
+$string['coursecateditable'] = 'Course category editable';
+$string['coursecateditable_help'] = 'Disabling will make the course category name an uneditable field.';
+
+// BEGIN LSU Better Letters
+$string['letterscustompercents'] = 'Custom Percentages';
+$string['letterscustompercents_help'] = 'Allows for users to enter a value for the percents.';
+$string['lettersdefaultletters'] = 'F,D,C,B,A';
+$string['lettersstrictletter'] = 'Strict Letter names';
+$string['lettersstrictletter_help'] = 'This setting forces the default letter names defined with the selected Letter names.';
+$string['lettersnames'] = 'Letter names';
+$string['lettersname_help'] = 'This setting forces the default letter names defined with this system scale. __Note__: The default letter names are A-F.';
+// END LSU Better Letters
 
 // Deprecated since 3.0.
 $string['categoriesanditems'] = 'Categories and items';
diff --git a/lib/grade/constants.php b/lib/grade/constants.php
index 662965e..ee6fb95 100644
--- a/lib/grade/constants.php
+++ b/lib/grade/constants.php
@@ -240,6 +240,11 @@ define('GRADE_REPORT_MEAN_ALL', 0);
 define('GRADE_REPORT_MEAN_GRADED', 1);
 
 /**
+ * GRADE_REPORT_MEAN_GRADED_NO_ZEROS - Only include grade items where the student has a grade greater than 0 when calculating the mean.
+ */
+define('GRADE_REPORT_MEAN_GRADED_NO_ZEROS', 2);
+
+/**
  * GRADE_NAVMETHOD_DROPDOWN - Display a drop down box to allow navigation within the gradebook
  */
 define('GRADE_NAVMETHOD_DROPDOWN', 0);
diff --git a/lib/grade/grade_category.php b/lib/grade/grade_category.php
index 7ad1284..2b19c3e 100644
--- a/lib/grade/grade_category.php
+++ b/lib/grade/grade_category.php
@@ -427,6 +427,31 @@ class grade_category extends grade_object {
         $aggonlygrddiff  = $db_item->aggregateonlygraded != $this->aggregateonlygraded;
         $aggoutcomesdiff = $db_item->aggregateoutcomes   != $this->aggregateoutcomes;
 
+        $oldweighted = $db_item->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+        $newweighted = $this->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+
+        if ($aggregationdiff and ($oldweighted or $newweighted)) {
+
+            $children = $this->get_children(true);
+
+            foreach ($children as $element) {
+                $child = $element['object'];
+
+                if ($child instanceof grade_category) {
+                    $child = $child->get_grade_item();
+                }
+
+                if ($child->is_course_item() or (
+                    $db_item->is_item_extra_credit($child) and
+                    $this->is_item_extra_credit($child))) {
+                    continue;
+                }
+
+                $child->aggregationcoef = ($oldweighted && $child->aggregationcoef <> 1) ? 0.00000 : 1.00000;
+                $child->update();
+            }
+        }
+
         return ($aggregationdiff || $keephighdiff || $droplowdiff || $aggonlygrddiff || $aggoutcomesdiff);
     }
 
@@ -1090,16 +1115,21 @@ class grade_category extends grade_object {
             case GRADE_AGGREGATE_WEIGHTED_MEAN: // Weighted average of all existing final grades, weight specified in coef
                 $weightsum = 0;
                 $sum       = 0;
+                $extrasum  = 0;
 
                 foreach ($grade_values as $itemid=>$grade_value) {
                     if ($weights !== null) {
                         $weights[$itemid] = $items[$itemid]->aggregationcoef;
                     }
-                    if ($items[$itemid]->aggregationcoef <= 0) {
+                    $coef = $items[$itemid]->aggregationcoef;
+                    if ($coef == 0) {
                         continue;
+                    } else if ($coef < 0) {
+                        $extrasum += ($grade_value / ($this->grade_item->grademax / $items[$itemid]->grademax));
+                    } else {
+                        $weightsum += $coef;
+                        $sum       += $coef * $grade_value;
                     }
-                    $weightsum += $items[$itemid]->aggregationcoef;
-                    $sum       += $items[$itemid]->aggregationcoef * $grade_value;
                 }
                 if ($weightsum == 0) {
                     $agg_grade = null;
@@ -1112,8 +1142,8 @@ class grade_category extends grade_object {
                             $weights[$itemid] = $weight / $weightsum;
                         }
                     }
-
                 }
+                $agg_grade += $extrasum;
                 break;
 
             case GRADE_AGGREGATE_WEIGHTED_MEAN2:
@@ -1525,9 +1555,11 @@ class grade_category extends grade_object {
         //find max grade possible
         $maxes = array();
 
+        $notweightedmean = $this->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN;
+
         foreach ($items as $item) {
 
-            if ($item->aggregationcoef > 0) {
+            if (($notweightedmean and $item->aggregationcoef > 0) or $item->aggregationcoef < 0) {
                 // extra credit from this activity - does not affect total
                 continue;
             } else if ($item->aggregationcoef2 <= 0) {
@@ -1747,6 +1779,9 @@ class grade_category extends grade_object {
     public function apply_limit_rules(&$grade_values, $items) {
         $extraused = $this->is_extracredit_used();
 
+        // Added for the sake of simplicity
+        $isweightedmean = $this->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+
         if (!empty($this->droplow)) {
             asort($grade_values, SORT_NUMERIC);
             $dropped = 0;
@@ -1770,7 +1805,8 @@ class grade_category extends grade_object {
 
                 // Find the first remaining grade item that is available to be dropped
                 foreach ($grade_keys as $gradekeyindex=>$gradekey) {
-                    if (!$extraused || $items[$gradekey]->aggregationcoef <= 0) {
+                   // Modified to make sure extra credit items are not dropped regardless of aggregation method.
+                   if (!$extraused || ($isweightedmean && $items[$gradekey]->aggregationcoef > 0) || (!$isweightedmean && $items[$gradekey]->aggregationcoef <= 0)) {
                         // Found a non-extra credit grade item that is eligible to be dropped
                         $originalindex = $gradekeyindex;
                         $founditemid = $grade_keys[$originalindex];
@@ -1797,7 +1833,8 @@ class grade_category extends grade_object {
                         break;
                     }
 
-                    if ($extraused && $items[$possibleitemid]->aggregationcoef > 0) {
+                    // Modified to make sure extra credit items are not dropped regardless of aggregation method.
+                    if (($extraused && ($isweightedmean && $items[$gradekey]->aggregationcoef <= 0)) || (($extraused && (!$isweightedmean && $items[$gradekey]->aggregationcoef > 0)))) {
                         // Don't drop extra credit grade items. Continue the search.
                         continue;
                     }
@@ -1822,7 +1859,7 @@ class grade_category extends grade_object {
 
             foreach ($grade_values as $itemid=>$value) {
 
-                if ($extraused and $items[$itemid]->aggregationcoef > 0) {
+                if ($this->is_item_extra_credit($items[$itemid])) {
                     // we keep all extra credits
 
                 } else if ($kept < $this->keephigh) {
@@ -1836,6 +1873,27 @@ class grade_category extends grade_object {
     }
 
     /**
+     * Returns whether or not the item is extra credit.
+     *
+     * @return bool
+     */
+    function is_item_extra_credit($item) {
+        $extraused = $this->is_extracredit_used();
+
+        if (!$extraused)
+            return false;
+
+        $coef = $item->aggregationcoef;
+
+        $validextra = (
+            ($this->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN && $coef > 0) ||
+            $coef < 0
+        );
+
+        return ($extraused && $validextra);
+    }
+
+    /**
      * Returns whether or not we can apply the limit rules.
      *
      * There are cases where drop lowest or keep highest should not be used
@@ -1917,6 +1975,7 @@ class grade_category extends grade_object {
     public static function aggregation_uses_extracredit($aggregation) {
         return ($aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN2
              or $aggregation == GRADE_AGGREGATE_EXTRACREDIT_MEAN
+             or $aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN
              or $aggregation == GRADE_AGGREGATE_SUM);
     }
 
diff --git a/lib/grade/grade_item.php b/lib/grade/grade_item.php
index 229571e..d7d0dec 100644
--- a/lib/grade/grade_item.php
+++ b/lib/grade/grade_item.php
@@ -1489,21 +1489,41 @@ class grade_item extends grade_object {
         if ($from == GRADE_AGGREGATE_SUM && $to == GRADE_AGGREGATE_SUM && $this->weightoverride) {
             // Do nothing. We are switching from SUM to SUM and the weight is overriden,
             // a teacher would not expect any change in this situation.
-
         } else if ($from == GRADE_AGGREGATE_WEIGHTED_MEAN && $to == GRADE_AGGREGATE_WEIGHTED_MEAN) {
             // Do nothing. The weights can be kept in this case.
-
         } else if (in_array($from, array(GRADE_AGGREGATE_SUM,  GRADE_AGGREGATE_EXTRACREDIT_MEAN, GRADE_AGGREGATE_WEIGHTED_MEAN2))
                 && in_array($to, array(GRADE_AGGREGATE_SUM,  GRADE_AGGREGATE_EXTRACREDIT_MEAN, GRADE_AGGREGATE_WEIGHTED_MEAN2))) {
-
             // Reset all but the the extra credit field.
             $this->aggregationcoef2 = $defaults['aggregationcoef2'];
-            $this->weightoverride = $defaults['weightoverride'];
+
+            if ($from == GRADE_AGGREGATE_WEIGHTED_MEAN2 && $to == GRADE_AGGREGATE_SUM && $this->aggregationcoef == 1) {
+                $this->weightoverride = 1;
+                $this->aggregationcoef = '1.00000';
+                $this->aggregationcoef2 = '0.00000';
+            } else {
+                $this->weightoverride = $defaults['weightoverride'];
+            }
 
             if ($to != GRADE_AGGREGATE_EXTRACREDIT_MEAN) {
                 // Normalise extra credit, except for 'Mean with extra credit' which supports higher values than 1.
                 $this->aggregationcoef = min(1, $this->aggregationcoef);
             }
+        } else if (($from == GRADE_AGGREGATE_WEIGHTED_MEAN && $to == GRADE_AGGREGATE_SUM) && $this->aggregationcoef <= 0) {
+            $this->weightoverride = 1;
+            $this->aggregationcoef2 = '0.00000';
+            $this->aggregationcoef = '1.00000';
+        } else if (($from == GRADE_AGGREGATE_SUM && $to == GRADE_AGGREGATE_WEIGHTED_MEAN) && ($this->aggregationcoef = 1 && $this->weightoverride == 1)) {
+            $this->aggregationcoef2 = $defaults['aggregationcoef2'];
+            $this->weightoverride = $defaults['weightoverride'];
+            $this->aggregationcoef = '-1.00000';
+        } else if ($from == GRADE_AGGREGATE_WEIGHTED_MEAN && $to == GRADE_AGGREGATE_WEIGHTED_MEAN2 && $this->aggregationcoef <= 0) {
+            $this->aggregationcoef = '1.00000';
+            $this->aggregationcoef2 = $defaults['aggregationcoef2'];
+            $this->weightoverride = '1';
+        } else if ($from == GRADE_AGGREGATE_WEIGHTED_MEAN2 && $to == GRADE_AGGREGATE_WEIGHTED_MEAN && $this->aggregationcoef == 1) {
+            $this->aggregationcoef = $this->aggregationcoef * -1;
+            $this->aggregationcoef2 = $defaults['aggregationcoef2'];
+            $this->weightoverride = '1';
         } else {
             // Reset all.
             $this->aggregationcoef = $defaults['aggregationcoef'];
diff --git a/lib/gradelib.php b/lib/gradelib.php
index b790626..1ef866e 100644
--- a/lib/gradelib.php
+++ b/lib/gradelib.php
@@ -764,7 +764,7 @@ function grade_format_gradevalue($value, &$grade_item, $localized=true, $display
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized);
 
         case GRADE_DISPLAY_TYPE_LETTER:
-            return grade_format_gradevalue_letter($value, $grade_item);
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized);
 
         case GRADE_DISPLAY_TYPE_REAL_PERCENTAGE:
             return grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ' (' .
@@ -772,23 +772,23 @@ function grade_format_gradevalue($value, &$grade_item, $localized=true, $display
 
         case GRADE_DISPLAY_TYPE_REAL_LETTER:
             return grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ' (' .
-                    grade_format_gradevalue_letter($value, $grade_item) . ')';
+                    grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_PERCENTAGE_REAL:
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_LETTER_REAL:
-            return grade_format_gradevalue_letter($value, $grade_item) . ' (' .
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_LETTER_PERCENTAGE:
-            return grade_format_gradevalue_letter($value, $grade_item) . ' (' .
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_PERCENTAGE_LETTER:
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ' (' .
-                    grade_format_gradevalue_letter($value, $grade_item) . ')';
+                    grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ')';
         default:
             return '';
     }
@@ -845,7 +845,7 @@ function grade_format_gradevalue_percentage($value, $grade_item, $decimals, $loc
  * @param object $grade_item Grade item object
  * @return string
  */
-function grade_format_gradevalue_letter($value, $grade_item) {
+function grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) {
     global $CFG;
     $context = context_course::instance($grade_item->courseid, IGNORE_MISSING);
     if (!$letters = grade_get_letters($context)) {
@@ -858,6 +858,7 @@ function grade_format_gradevalue_letter($value, $grade_item) {
 
     $value = grade_grade::standardise_score($value, $grade_item->grademin, $grade_item->grademax, 0, 100);
     $value = bounded_number(0, $value, 100); // just in case
+    $value = format_float($value, $decimals, $localized);
 
     $gradebookcalculationsfreeze = 'gradebook_calculations_freeze_' . $grade_item->courseid;
 
