diff --git a/admin/settings/grades.php b/admin/settings/grades.php
index 6d12d99..adbc6f8 100644
--- a/admin/settings/grades.php
+++ b/admin/settings/grades.php
@@ -23,6 +23,52 @@ if (has_capability('moodle/grade:manage', $systemcontext)
     $temp = new admin_settingpage('gradessettings', new lang_string('generalsettings', 'grades'), 'moodle/grade:manage');
     if ($ADMIN->fulltree) {
 
+       $temp->add(new admin_setting_heading('grade_anonymous_header',
+            get_string('anonymousgrading', 'grades'), ''));
+
+        $temp->add(new admin_setting_configcheckbox('grade_anonymous_grading',
+            get_string('anonymousgrading', 'grades'),
+            get_string('anonymousgrading_help', 'grades'), 0));
+
+        $course_cats = $DB->get_records_menu(
+            'course_categories', null, 'name ASC', 'id, name'
+        );
+
+        $temp->add(new admin_setting_configmultiselect('grade_anonymous_cats',
+            get_string('anonymouscategories', 'grades'),
+            get_string('anonymouscategories_help', 'grades'),
+            array(), $course_cats));
+
+        $fields = $DB->get_records_menu(
+            'user_info_field', null, 'name ASC', 'id, name'
+        );
+
+        $url = new moodle_url('/user/profile/index.php', array(
+            'id' => 0,
+            'action' => 'editfield',
+            'datatype' => 'text'
+        ));
+
+        if (!empty($fields)) {
+            $temp->add(new admin_setting_configselect('grade_anonymous_field',
+                get_string('anonymousfield', 'grades'),
+                get_string('anonymousfield_help', 'grades', $url->out()),
+                current(array_keys($fields)), $fields));
+        } else {
+            $temp->add(new admin_setting_heading('grade_anonymous_field',
+                get_string('anonymousfield', 'grades'),
+                get_string('anonymousfield_help', 'grades', $url->out())));
+        }
+
+        $temp->add(new admin_setting_configtext('grade_anonymous_adjusts',
+            get_string('anonymousadjusts', 'grades'),
+            get_string('anonymousadjusts_help', 'grades'), '0.0'));
+
+        $temp->add(new admin_setting_heading('grade_general_settings',
+            get_string('generalsettings', 'grades'), ''));
+
+        $temp->add(new admin_setting_configcheckbox('grade_coursecateditable', new lang_string('coursecateditable', 'grades'), new lang_string('coursecateditable_help', 'grades'), 1));
+
         // new CFG variable for gradebook (what roles to display)
         $temp->add(new admin_setting_special_gradebookroles());
 
@@ -68,6 +114,10 @@ if (has_capability('moodle/grade:manage', $systemcontext)
 
         $temp->add(new admin_setting_special_gradelimiting());
 
+        $temp->add(new admin_setting_configcheckbox('grade_report_nocalculations', get_string('nocalculations', 'grades'), get_string('nocalculations_help', 'grades'), 0));
+
+        $temp->add(new admin_setting_configcheckbox('privacy_ack', new lang_string('privacy_ack', 'grades'), new lang_string('privacy_ack_help', 'grades'), 0));
+
         $temp->add(new admin_setting_special_gradepointmax());
 
         $temp->add(new admin_setting_special_gradepointdefault());
@@ -102,8 +152,14 @@ if (has_capability('moodle/grade:manage', $systemcontext)
         $temp->add(new admin_setting_configmultiselect('grade_aggregations_visible', new lang_string('aggregationsvisible', 'grades'),
                                                        new lang_string('aggregationsvisiblehelp', 'grades'), $defaultvisible, $options));
 
+        // Weighted Extra Credit handling
+        $temp->add(new admin_setting_configcheckbox('grade_w_extra_credit', new lang_string('w_ec', 'grades'), new lang_string('w_ec_help', 'grades'), '1'));
+
         $options = array(0 => new lang_string('no'), 1 => new lang_string('yes'));
 
+        $temp->add(new admin_setting_configcheckbox('grade_overridecat', new lang_string('overridecat', 'grades'),
+            new lang_string('overridecat_help', 'grades'), 1));
+
         $defaults = array('value'=>1, 'forced'=>false, 'adv'=>true);
         $temp->add(new admin_setting_gradecat_combo('grade_aggregateonlygraded', new lang_string('aggregateonlygraded', 'grades'),
                     new lang_string('aggregateonlygraded_help', 'grades'), $defaults, $options));
@@ -125,6 +181,11 @@ if (has_capability('moodle/grade:manage', $systemcontext)
         $defaults['forced'] = false;
         $temp->add(new admin_setting_gradecat_combo('grade_droplow', new lang_string('droplow', 'grades'),
                     new lang_string('droplow_help', 'grades'), $defaults, $options));
+
+        $temp->add(new admin_setting_configcheckbox('grade_droplow_limit',
+            new lang_string('droplow_limit', 'grades'),
+            new lang_string('droplow_limit_help', 'grades'), 0)
+        );
     }
     $ADMIN->add('grades', $temp);
 
@@ -132,9 +193,23 @@ if (has_capability('moodle/grade:manage', $systemcontext)
     /// Grade item settings
     $temp = new admin_settingpage('gradeitemsettings', new lang_string('gradeitemsettings', 'grades'), 'moodle/grade:manage');
     if ($ADMIN->fulltree) {
+        $temp->add(new admin_setting_configcheckbox('grade_multfactor_alt',
+            new lang_string('multfactor_alt', 'grades'),
+            new lang_string('multfactor_alt_desc', 'grades'), 0));
+
         $temp->add(new admin_setting_configselect('grade_displaytype', new lang_string('gradedisplaytype', 'grades'),
                                                   new lang_string('gradedisplaytype_help', 'grades'), GRADE_DISPLAY_TYPE_REAL, $display_types));
 
+        $temp->add(new admin_setting_configcheckbox('grade_item_manual_recompute',
+            new lang_string('gradeitemmanualrecompute', 'grades'),
+            new lang_string('gradeitemmanualrecompute_help', 'grades'), 0));
+
+        if ($CFG->grade_item_manual_recompute) {
+            $temp->add(new admin_setting_configcheckbox('manipulate_categories',
+                new lang_string('manipulatecategories', 'grades'),
+                new lang_string('manipulatecategories_help', 'grades'), 0));
+        }
+
         $temp->add(new admin_setting_configselect('grade_decimalpoints', new lang_string('decimalpoints', 'grades'),
                                                   new lang_string('decimalpoints_help', 'grades'), 2,
                                                   array( '0' => '0',
@@ -163,6 +238,8 @@ if (has_capability('moodle/grade:manage', $systemcontext)
                                                              'locktime' => new lang_string('locktime', 'grades'),
                                                              'aggregationcoef' => new lang_string('aggregationcoef', 'grades'),
                                                              'parentcategory' => new lang_string('parentcategory', 'grades'))));
+
+        $temp->add(new admin_setting_configcheckbox('grade_min_hide', new lang_string('minimum_hide', 'grades'), new lang_string('minimum_hide_help', 'grades'), '0'));
     }
     $ADMIN->add('grades', $temp);
 
@@ -175,9 +252,34 @@ if (has_capability('moodle/grade:manage', $systemcontext)
         $outcomes = new admin_externalpage('outcomes', new lang_string('outcomes', 'grades'), $CFG->wwwroot.'/grade/edit/outcome/index.php', 'moodle/grade:manage');
         $ADMIN->add('grades', $outcomes);
     }
-    $letters = new admin_externalpage('letters', new lang_string('letters', 'grades'), $CFG->wwwroot.'/grade/edit/letter/index.php', 'moodle/grade:manageletters');
+
+    $letters_str = new lang_string('letters', 'grades');
+    $letters_base = $CFG->wwwroot.'/grade/edit/letter';
+    $letters = new admin_externalpage('letters', $letters_str, $letters_base . '/index.php', 'moodle/grade:manageletters');
+
     $ADMIN->add('grades', $letters);
 
+    $letters_settings_str = new lang_string('letter', 'grades') . ' ' . new lang_string('edit') . ' ' . new lang_string('settings');
+    $temp = new admin_settingpage('letterssettings', $letters_settings_str, 'moodle/grade:manageletters');
+    if ($ADMIN->fulltree) {
+        $temp->add(new admin_setting_configcheckbox('grade_letters_custom',
+            new lang_string('letterscustompercents', 'grades'), new lang_string('letterscustompercents_help', 'grades'), 0));
+
+        $temp->add(new admin_setting_configcheckbox('grade_letters_strict',
+            new lang_string('lettersstrictletter', 'grades'), new lang_string('lettersstrictletter_help', 'grades'), 0));
+
+        $params = array('courseid' => 0);
+
+        $db_scales = $DB->get_records_menu('scale', $params, '', 'id, name');
+
+        $scales = array(0 => new lang_string('lettersdefaultletters', 'grades')) + $db_scales;
+
+        $temp->add(new admin_setting_configselect('grade_letters_names',
+            new lang_string('lettersnames', 'grades'),
+            new lang_string('lettersname_help', 'grades'), 0, $scales));
+    }
+    $ADMIN->add('grades', $temp);
+
     // The plugins must implement a settings.php file that adds their admin settings to the $settings object
 
     // Reports
diff --git a/admin/settings/server.php b/admin/settings/server.php
index ec37e43..ce9ab01 100644
--- a/admin/settings/server.php
+++ b/admin/settings/server.php
@@ -152,6 +152,8 @@ $temp->add(new admin_setting_configselect('gradehistorylifetime', new lang_strin
                                                                                                      60 => new lang_string('numdays', '', 60),
                                                                                                      30 => new lang_string('numdays', '', 30))));
 
+$temp->add(new admin_setting_configtime('gradehistorylifetimestarthour', 'gradehistorylifetimetartminute', get_string('gradehistorylifetimestart', 'grades'), get_string('configgradehistorylifetimestart', 'grades'), array('h' => 1, 'm' => 15)));
+
 $ADMIN->add('server', $temp);
 
 
diff --git a/grade/edit/letter/edit_form.php b/grade/edit/letter/edit_form.php
index baa4087..e7a4559 100644
--- a/grade/edit/letter/edit_form.php
+++ b/grade/edit/letter/edit_form.php
@@ -31,6 +31,8 @@ require_once $CFG->libdir.'/formslib.php';
 class edit_letter_form extends moodleform {
 
     public function definition() {
+	global $DB;
+
         $mform =& $this->_form;
         $num   = $this->_customdata['num'];
         $admin = $this->_customdata['admin'];
@@ -46,16 +48,38 @@ class edit_letter_form extends moodleform {
         $gradeletter       = get_string('gradeletter', 'grades');
         $gradeboundary     = get_string('gradeboundary', 'grades');
 
-        $percentages = array(-1 => get_string('unused', 'grades'));
+        $unused_str = get_string('unused', 'grades');
+
+        $percentages = array(-1 => $unused_str);
         for ($i=100; $i > -1; $i--) {
             $percentages[$i] = "$i %";
         }
 
+        $custom = get_config('moodle', 'grade_letters_custom');
+        $strict = get_config('moodle', 'grade_letters_strict');
+
+        $default = get_config('moodle', 'grade_letters_names');
+
+        if ($default and $scale = $DB->get_record('scale', array('id' => $default))) {
+            $default_letters = $scale->scale;
+        } else {
+            $default_letters = get_string('lettersdefaultletters', 'grades');
+        }
+
+        $default_letters = array_reverse(explode(',', $default_letters));
+        $letters = array('' => get_string('unused', 'grades')) +
+            array_combine($default_letters, $default_letters);
+
         for($i=1; $i<$num+1; $i++) {
             $gradelettername = 'gradeletter'.$i;
             $gradeboundaryname = 'gradeboundary'.$i;
 
-            $mform->addElement('text', $gradelettername, $gradeletter." $i");
+            if ($strict) {
+                $mform->addElement('select', $gradelettername, $gradeletter." $i", $letters);
+            } else {
+                $mform->addElement('text', $gradelettername, $gradeletter." $i");
+            }
+
             if ($i == 1) {
                 $mform->addHelpButton($gradelettername, 'gradeletter', 'grades');
             }
@@ -63,15 +87,31 @@ class edit_letter_form extends moodleform {
 
             if (!$admin) {
                 $mform->disabledIf($gradelettername, 'override', 'notchecked');
-                $mform->disabledIf($gradelettername, $gradeboundaryname, 'eq', -1);
+
+                if ($custom) {
+                    $mform->disabledIf($gradeboundaryname, $gradelettername, 'eq', '');
+                } else {
+                    $mform->disabledIf($gradelettername, $gradeboundaryname, 'eq', -1);
+                }
+            }
+
+            if ($custom) {
+                $mform->addElement('text', $gradeboundaryname, $gradeboundary." $i");
+
+                $mform->addRule($gradeboundaryname, null, 'numeric', '', 'client');
+
+                $mform->setType($gradeboundaryname, PARAM_FLOAT);
+                $mform->setDefault($gradeboundaryname, '');
+            } else {
+                $mform->addElement('select', $gradeboundaryname, $gradeboundary." $i", $percentages);
+
+                $mform->setType($gradeboundaryname, PARAM_INT);
+                $mform->setDefault($gradeboundaryname, -1);
             }
 
-            $mform->addElement('select', $gradeboundaryname, $gradeboundary." $i", $percentages);
             if ($i == 1) {
                 $mform->addHelpButton($gradeboundaryname, 'gradeboundary', 'grades');
             }
-            $mform->setDefault($gradeboundaryname, -1);
-            $mform->setType($gradeboundaryname, PARAM_INT);
 
             if (!$admin) {
                 $mform->disabledIf($gradeboundaryname, 'override', 'notchecked');
diff --git a/grade/edit/letter/index.php b/grade/edit/letter/index.php
index d0dc35a..8e587f0 100644
--- a/grade/edit/letter/index.php
+++ b/grade/edit/letter/index.php
@@ -44,6 +44,9 @@ if (!$edit) {
     require_capability('moodle/grade:manageletters', $context);
 }
 
+$custom = (bool) get_config('moodle', 'grade_letters_custom');
+$decimals = $custom ? (int) get_config('moodle', 'grade_decimalpoints') : 2;
+
 $returnurl = null;
 $editparam = null;
 if ($context->contextlevel == CONTEXT_SYSTEM or $context->contextlevel == CONTEXT_COURSECAT) {
@@ -65,6 +68,12 @@ if ($context->contextlevel == CONTEXT_SYSTEM or $context->contextlevel == CONTEX
     $returnurl = $CFG->wwwroot.'/grade/edit/letter/index.php?id='.$context->id;
     $editparam = '&edit=1';
 
+    if ($custom) {
+        $item = grade_item::fetch(array('itemtype' => 'course', 'courseid' => $course->id));
+
+        $decimals = $item ? $item->get_decimals() : $decimals;
+    }
+
     $gpr = new grade_plugin_return(array('type'=>'edit', 'plugin'=>'letter', 'courseid'=>$course->id));
 } else {
     print_error('invalidcourselevel');
@@ -80,15 +89,14 @@ $num = count($letters) + 3;
 if (!$edit) {
 
     $data = array();
-
     $max = 100;
     foreach($letters as $boundary=>$letter) {
         $line = array();
-        $line[] = format_float($max,2).' %';
-        $line[] = format_float($boundary,2).' %';
+        $line[] = format_float($max, $decimals).' %';
+        $line[] = format_float($boundary, $decimals).' %';
         $line[] = format_string($letter);
         $data[] = $line;
-        $max = $boundary - 0.01;
+        $max = $boundary - (1 / pow(10, $decimals));
     }
 
     print_grade_page_head($COURSE->id, 'letter', 'view', get_string('gradeletters', 'grades'));
@@ -99,9 +107,9 @@ if (!$edit) {
 
     $table = new html_table();
     $table->head  = array(get_string('max', 'grades'), get_string('min', 'grades'), get_string('letter', 'grades'));
-    $table->size  = array('30%', '30%', '40%');
+    $table->size  = array('33%', '33%', '34%');
     $table->align = array('left', 'left', 'left');
-    $table->width = '30%';
+    $table->width = '40%';
     $table->data  = $data;
     $table->tablealign  = 'center';
     echo html_writer::table($table);
@@ -119,7 +127,7 @@ if (!$edit) {
         $gradeboundaryname = 'gradeboundary'.$i;
 
         $data->$gradelettername   = $letter;
-        $data->$gradeboundaryname = $boundary;
+        $data->$gradeboundaryname = $custom ? format_float($boundary, $decimals) : (int) $boundary;
         $i++;
     }
     $data->override = $DB->record_exists('grade_letters', array('contextid' => $context->id));
@@ -146,30 +154,32 @@ if (!$edit) {
                 if ($letter == '') {
                     continue;
                 }
-                $letters[$data->$gradeboundaryname] = $letter;
+                $stored = $custom ? "{$data->$gradeboundaryname}" : $data->$gradeboundaryname;
+                $letters[$stored] = $letter;
             }
         }
         krsort($letters, SORT_NUMERIC);
 
-        $old_ids = array();
-        if ($records = $DB->get_records('grade_letters', array('contextid' => $context->id), 'lowerboundary ASC', 'id')) {
-            $old_ids = array_keys($records);
-        }
+        $records = $DB->get_records('grade_letters', array('contextid' => $context->id), 'lowerboundary ASC', 'id');
 
         foreach($letters as $boundary=>$letter) {
-            $record = new stdClass();
-            $record->letter        = $letter;
-            $record->lowerboundary = $boundary;
-            $record->contextid     = $context->id;
-
-            if ($old_id = array_pop($old_ids)) {
-                $record->id = $old_id;
-                $DB->update_record('grade_letters', $record);
+            $params = array(
+                'letter' => $letter,
+                'lowerboundary' => $boundary,
+                'contextid' => $context->id
+            );
+
+            if ($record = $DB->get_record('grade_letters', $params)) {
+                unset($records[$record->id]);
+                continue;
             } else {
+                $record = (object) $params;
                 $DB->insert_record('grade_letters', $record);
             }
         }
 
+        $old_ids = array_keys($records);
+
         foreach($old_ids as $old_id) {
             $DB->delete_records('grade_letters', array('id' => $old_id));
         }
diff --git a/grade/edit/settings/form.php b/grade/edit/settings/form.php
index 918d44b..97880c5 100644
--- a/grade/edit/settings/form.php
+++ b/grade/edit/settings/form.php
@@ -65,6 +65,14 @@ class course_settings_form extends moodleform {
         $mform->addElement('select', 'aggregationposition', get_string('aggregationposition', 'grades'), $options);
         $mform->addHelpButton('aggregationposition', 'aggregationposition', 'grades');
 
+        // Anonymous settings
+        if (grade_anonymous::is_supported($COURSE) and $can_view_admin_links) {
+            $mform->addElement('text', 'anonymous_adjusts',
+                get_string('anonymousadjusts', 'grades'));
+            $mform->setDefault('anonymous_adjusts', $CFG->grade_anonymous_adjusts);
+            $mform->addHelpButton('anonymous_adjusts', 'anonymousadjusts', 'grades');
+        }
+
         // Grade item settings
         $mform->addElement('header', 'grade_item_settings', get_string('gradeitemsettings', 'grades'));
         $mform->setExpanded('grade_item_settings');
diff --git a/grade/edit/settings/index.php b/grade/edit/settings/index.php
index fa7a81f..037fdd8 100644
--- a/grade/edit/settings/index.php
+++ b/grade/edit/settings/index.php
@@ -60,13 +60,17 @@ if ($mform->is_cancelled()) {
 
 } else if ($data = $mform->get_data()) {
     $data = (array)$data;
-    $general = array('displaytype', 'decimalpoints', 'aggregationposition');
+    $general = array('displaytype', 'decimalpoints', 'anonymous_adjusts', 'aggregationposition');
     foreach ($data as $key=>$value) {
         if (!in_array($key, $general) and strpos($key, 'report_') !== 0
                                       and strpos($key, 'import_') !== 0
                                       and strpos($key, 'export_') !== 0) {
             continue;
         }
+        if ($key == 'anonymous_adjusts' and
+            !is_numeric($value) or trim($value) === '') {
+            $value = -1;
+        }
         if ($value == -1) {
             $value = null;
         }
diff --git a/grade/edit/tree/category.php b/grade/edit/tree/category.php
index 852fdd5..1b0030f 100644
--- a/grade/edit/tree/category.php
+++ b/grade/edit/tree/category.php
@@ -52,6 +52,8 @@ $returnurl = $gpr->get_return_url('index.php?id='.$course->id);
 
 $heading = get_string('categoryedit', 'grades');
 
+$curve_to = get_config('moodle', 'grade_multfactor_alt');
+
 if ($id) {
     if (!$grade_category = grade_category::fetch(array('id'=>$id, 'courseid'=>$course->id))) {
         print_error('invalidcategory');
@@ -98,6 +100,17 @@ if ($id) {
     }
 }
 
+$multfactor = $grade_item->multfactor;
+$curve_decimals = 4;
+$decimalpoints = $grade_item->get_decimals();
+
+if ($curve_to) {
+    $curve_decimals = $decimalpoints;
+    $multfactor *= $category->grade_item_grademax;
+}
+
+$category->grade_item_multfactor = format_float($multfactor, $curve_decimals);
+
 $mform = new edit_category_form(null, array('current'=>$category, 'gpr'=>$gpr));
 
 if ($mform->is_cancelled()) {
@@ -167,6 +180,17 @@ if ($mform->is_cancelled()) {
         }
     }
 
+    // Special handling of curve-to
+    if ($curve_to) {
+        if (empty($itemdata->multfactor) || $itemdata->multfactor <= 0.0000) {
+            $itemdata->multfactor = 1.0000;
+        } else if (!isset($data->curve_to) and isset($grade_item->multfactor)) {
+            $itemdata->multfactor = $grade_item->multfactor;
+        } else {
+            $itemdata->multfactor = $itemdata->multfactor / $itemdata->grademax;
+        }
+    }
+
     // When creating a new category, a number of grade item fields are filled out automatically, and are required.
     // If the user leaves these fields empty during creation of a category, we let the default values take effect
     // Otherwise, we let the user-entered grade item values take effect
diff --git a/grade/edit/tree/category_form.php b/grade/edit/tree/category_form.php
index 950e3bf..463f0fe 100644
--- a/grade/edit/tree/category_form.php
+++ b/grade/edit/tree/category_form.php
@@ -174,6 +174,41 @@ class edit_category_form extends moodleform {
         $mform->disabledIf('grade_item_gradepass', 'grade_item_gradetype', 'eq', GRADE_TYPE_NONE);
         $mform->disabledIf('grade_item_gradepass', 'grade_item_gradetype', 'eq', GRADE_TYPE_TEXT);
 
+        if (get_config('moodle', 'grade_multfactor_alt')) {
+            $curve_to = get_string('multfactor_alt', 'grades');
+            $perform_curve = get_string('allow_multfactor_alt', 'grades');
+
+            $mform->addElement('checkbox', 'curve_to', $perform_curve,'');
+
+            $mform->setAdvanced('curve_to');
+
+            $mform->addElement('text', 'grade_item_multfactor', $curve_to);
+            $mform->setType('grade_item_multfactor', PARAM_FLOAT);
+
+            $mform->disabledIf('curve_to', 'gradetype', 'eq', GRADE_TYPE_NONE);
+            $mform->disabledIf('curve_to', 'gradetype', 'eq', GRADE_TYPE_TEXT);
+
+            $mform->disabledIf('grade_item_multfactor', 'curve_to', 'notchecked');
+            $mform->addHelpButton(
+                'grade_item_multfactor', 'multfactor_alt',
+                'grades', null
+            );
+        } else {
+            $mform->addElement('text', 'grade_item_multfactor', get_string('multfactor', 'grades'));
+            $mform->addHelpButton('grade_item_multfactor', 'grade_item_multfactor', 'grades');
+        }
+
+        $mform->setAdvanced('grade_item_multfactor');
+        $mform->disabledIf('grade_item_multfactor', 'gradetype', 'eq', GRADE_TYPE_NONE);
+        $mform->disabledIf('grade_item_multfactor', 'gradetype', 'eq', GRADE_TYPE_TEXT);
+
+        $mform->addElement('text', 'grade_item_plusfactor', get_string('plusfactor', 'grades'));
+        $mform->setType('grade_item_plusfactor', PARAM_FLOAT);
+        $mform->addHelpButton('grade_item_plusfactor', 'plusfactor', 'grades');
+        $mform->setAdvanced('grade_item_plusfactor');
+        $mform->disabledIf('grade_item_plusfactor', 'gradetype', 'eq', GRADE_TYPE_NONE);
+        $mform->disabledIf('grade_item_plusfactor', 'gradetype', 'eq', GRADE_TYPE_TEXT);
+
         /// grade display prefs
         $default_gradedisplaytype = grade_get_setting($COURSE->id, 'displaytype', $CFG->grade_displaytype);
         $options = array(GRADE_DISPLAY_TYPE_DEFAULT            => get_string('default', 'grades'),
@@ -361,8 +396,17 @@ class edit_category_form extends moodleform {
 
             // If it is a course category and its fullname is ?, show an empty field
             if ($grade_category->is_course_category() && $mform->getElementValue('fullname') == '?') {
-                $mform->setDefault('fullname', '');
+                $editable = (bool) get_config('moodle', 'grade_coursecateditable');
+
+                // If it is a course category and its fullname is ?, show an empty field
+                if ($editable && $mform->getElementValue('fullname') == '?') {
+                    $mform->setDefault('fullname', '');
+                } else if (!$editable) {
+                    $mform->setDefault('fullname', $COURSE->fullname);
+                    $mform->hardFreeze('fullname');
+                }
             }
+
             // remove unwanted aggregation options
             if ($mform->elementExists('aggregation')) {
                 $allaggoptions = array_keys($this->aggregation_options);
@@ -455,6 +499,11 @@ class edit_category_form extends moodleform {
                 }
             }
         }
+        // Freeze grademin element if option unavailable
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+        if ($min_is_hidden and $mform->elementExists('grade_item_grademin')) {
+            $mform->hardFreeze('grade_item_grademin');
+        }
     }
 
 /// perform extra validation before submission
diff --git a/grade/edit/tree/functions.js b/grade/edit/tree/functions.js
index 5649ea2..531512b 100644
--- a/grade/edit/tree/functions.js
+++ b/grade/edit/tree/functions.js
@@ -69,6 +69,61 @@ function update_category_aggregation(e, args) {
     window.location = 'index.php?id='+args.courseid+'&category='+args.category+'&aggregationtype='+selectmenu.get('value')+'&sesskey='+args.sesskey;
 }
 
+YUI().use("node-base", function(Y)
+{
+    function add_grademax_change_listeners(){
+        Y.all('.grademax').on('change', function(ev)
+            {
+                var node    = ev.target;
+                var id      = node.get('name');
+                var regex   = new RegExp('grademax_([0-9]+)');
+                var matcher = regex.exec(id);
+                var gradeId = matcher[1] || false;
+                var curveTo = gradeId ? Y.one("#multfactor"+gradeId) : null;
+
+                if(curveTo != null){
+                    var storedMult  = curveTo.getData("multfactor"+gradeId);
+                    var newGrMax    = parseFloat(node.get("value"));
+
+                    if(typeof storedMult !== "undefined"){
+                        curveTo.setAttribute("value", storedMult*newGrMax);
+                    }
+                }
+            }
+        );
+    }
+
+    function compute_multfactors(){
+        Y.all('.grademax').each(function(node, index)
+            {
+                var id      = node.get('name');
+                var regex   = new RegExp('grademax_([0-9]+)');
+                var matcher = regex.exec(id);
+                var gradeId = matcher[1] || false;
+                var curveTo = gradeId ? Y.one("#multfactor"+gradeId) : null;
+
+                if(curveTo != null){
+                    var crveVal = parseFloat(curveTo.get("value"));
+                    var grMax   = parseFloat(node.get("value"));
+                    var mFactor = crveVal/grMax;
+
+                    curveTo.setData("multfactor"+gradeId, mFactor);
+                }
+
+            }
+        );
+    };
+
+    function setup_curveto(){
+        compute_multfactors();
+        add_grademax_change_listeners();
+    };
+
+    Y.on(
+        "domready",
+        setup_curveto()
+    );
+});
 
 /* TODO: finish and rewrite for YUI3...
 Y.YUI2.namespace('grade_edit_tree');
@@ -244,4 +299,4 @@ Y.YUI2.namespace('grade_edit_tree');
     });
     // Y.YUI2.util.Event.onDOMReady(gretree.DDApp.init, gretree.DDApp, true); // Uncomment this line when dragdrop is fully implemented
 })();
-*/
\ No newline at end of file
+*/
diff --git a/grade/edit/tree/grade.php b/grade/edit/tree/grade.php
index 62536f6..1c00a8c 100644
--- a/grade/edit/tree/grade.php
+++ b/grade/edit/tree/grade.php
@@ -48,6 +48,11 @@ if (!$course = $DB->get_record('course', array('id' => $courseid))) {
     print_error('nocourseid');
 }
 
+$p = array('itemid' => $itemid);
+if (grade_anonymous::is_supported($course) and grade_anonymous::fetch($p)) {
+    print_error('anonymousnotallowed', 'grades');
+}
+
 $PAGE->set_pagelayout('incourse');
 require_login($course);
 $context = context_course::instance($course->id);
diff --git a/grade/edit/tree/index.php b/grade/edit/tree/index.php
index e48643d..a392994 100644
--- a/grade/edit/tree/index.php
+++ b/grade/edit/tree/index.php
@@ -226,6 +226,8 @@ if ($current_view != '') {
 //Ideally we could do the updates through $grade_edit_tree to avoid recreating it
 $recreatetree = false;
 
+$curve_to = get_config('moodle', 'grade_multfactor_alt');
+
 if ($data = data_submitted() and confirm_sesskey()) {
     // Perform bulk actions first
     if (!empty($data->bulkmove)) {
@@ -269,6 +271,10 @@ if ($data = data_submitted() and confirm_sesskey()) {
 
             $grade_item = grade_item::fetch(array('id'=>$aid, 'courseid'=>$courseid));
 
+            if ($param === 'multfactor' and $curve_to) {
+                $value = $value / $grade_item->grademax;
+            }
+
             if ($param === 'grademax' and $value < $grade_item->grademin) {
                 // better not allow values lower than grade min
                 $value = $grade_item->grademin;
@@ -286,7 +292,29 @@ if ($data = data_submitted() and confirm_sesskey()) {
             $value = clean_param($value, PARAM_BOOL);
 
             $grade_item = grade_item::fetch(array('id'=>$aid, 'courseid'=>$courseid));
-            $grade_item->aggregationcoef = $value;
+
+            // Weighted Mean special case
+            $parent = $grade_item->load_parent_category();
+
+            // Make sure about category item's parent category
+            if ($grade_item->itemtype == 'category') {
+                $parent = $parent->load_parent_category();
+            }
+
+            if ($parent->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN) {
+                $oldcoef = $grade_item->aggregationcoef;
+
+                // Retain original aggregationcoef if extra credit checked
+                if ($oldcoef < 0 and !$value) {
+                    $grade_item->aggregationcoef = $oldcoef * -1;
+                } else if ($oldcoef == 0 and $value) {
+                    $grade_item->aggregationcoef = -1;
+                } else {
+                    $grade_item->aggregationcoef = $value ? abs($oldcoef) * -1 : $oldcoef;
+                }
+            } else {
+                $grade_item->aggregationcoef = $value;
+            }
 
             $grade_item->update();
             grade_regrade_final_grades($courseid);
diff --git a/grade/edit/tree/item.php b/grade/edit/tree/item.php
index 7acf2eb..a38700a 100644
--- a/grade/edit/tree/item.php
+++ b/grade/edit/tree/item.php
@@ -52,6 +52,8 @@ $returnurl = $gpr->get_return_url('index.php?id='.$course->id);
 
 $heading = get_string('itemsedit', 'grades');
 
+$curve_to = get_config('moodle', 'grade_multfactor_alt');
+
 if ($grade_item = grade_item::fetch(array('id'=>$id, 'courseid'=>$courseid))) {
     // redirect if outcomeid present
     if (!empty($grade_item->outcomeid) && !empty($CFG->enableoutcomes)) {
@@ -86,10 +88,18 @@ if ($item->hidden > 1) {
 
 $item->locked = !empty($item->locked);
 
+$multfactor = $item->multfactor;
+$curve_decimals = 4;
+
+if ($curve_to) {
+    $curve_decimals = $decimalpoints;
+    $multfactor *= $item->grademax;
+}
+
 $item->grademax        = format_float($item->grademax, $decimalpoints);
 $item->grademin        = format_float($item->grademin, $decimalpoints);
 $item->gradepass       = format_float($item->gradepass, $decimalpoints);
-$item->multfactor      = format_float($item->multfactor, 4);
+$item->multfactor      = format_float($multfactor, $curve_decimals);
 $item->plusfactor      = format_float($item->plusfactor, 4);
 
 if ($parent_category->aggregation == GRADE_AGGREGATE_SUM or $parent_category->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN2) {
@@ -139,10 +149,23 @@ if ($mform->is_cancelled()) {
         }
     }
 
+    // Special handling of curve to
+    if ($curve_to) {
+        if (empty($data->multfactor) || $data->multfactor <= 0.0000) {
+            $data->multfactor = 1.0000;
+        } else if (!isset($data->curve_to) and isset($item->multfactor)) {
+            $data->multfactor = $grade_item->multfactor;
+        } else {
+            $data->multfactor = $data->multfactor / $data->grademax;
+        }
+    }
+
     $grade_item = new grade_item(array('id'=>$id, 'courseid'=>$courseid));
     grade_item::set_properties($grade_item, $data);
     $grade_item->outcomeid = null;
 
+    unset($grade_item->anonymous);
+
     // Handle null decimals value
     if (!property_exists($data, 'decimals') or $data->decimals < 0) {
         $grade_item->decimals = null;
@@ -152,6 +175,15 @@ if ($mform->is_cancelled()) {
         $grade_item->itemtype = 'manual'; // all new items to be manual only
         $grade_item->insert();
 
+        // Anonymous check
+        if (isset($data->anonymous) and grade_anonymous::is_supported($course)) {
+            $anon = new grade_anonymous(array('itemid' => $grade_item->id));
+
+            if (empty($anon->id)) {
+                $anon->insert();
+            }
+        }
+
         // set parent if needed
         if (isset($data->parentcategory)) {
             $grade_item->set_parent($data->parentcategory, 'gradebook');
diff --git a/grade/edit/tree/item_form.php b/grade/edit/tree/item_form.php
index 67c7a20..719c617 100644
--- a/grade/edit/tree/item_form.php
+++ b/grade/edit/tree/item_form.php
@@ -41,6 +41,12 @@ class edit_item_form extends moodleform {
 /// visible elements
         $mform->addElement('header', 'general', get_string('gradeitem', 'grades'));
 
+        if (grade_anonymous::is_supported($COURSE)) {
+            $mform->addElement(
+                'checkbox', 'anonymous', get_string('anonymousitem', 'grades')
+            );
+        }
+
         $mform->addElement('text', 'itemname', get_string('itemname', 'grades'));
         $mform->setType('itemname', PARAM_TEXT);
         $mform->addElement('text', 'iteminfo', get_string('iteminfo', 'grades'));
@@ -51,8 +57,7 @@ class edit_item_form extends moodleform {
         $mform->addHelpButton('idnumber', 'idnumbermod');
         $mform->setType('idnumber', PARAM_RAW);
 
-        $options = array(GRADE_TYPE_NONE=>get_string('typenone', 'grades'),
-                         GRADE_TYPE_VALUE=>get_string('typevalue', 'grades'),
+        $options = array(GRADE_TYPE_VALUE=>get_string('typevalue', 'grades'),
                          GRADE_TYPE_SCALE=>get_string('typescale', 'grades'),
                          GRADE_TYPE_TEXT=>get_string('typetext', 'grades'));
 
@@ -101,8 +106,25 @@ class edit_item_form extends moodleform {
         $mform->disabledIf('gradepass', 'gradetype', 'eq', GRADE_TYPE_TEXT);
         $mform->setType('gradepass', PARAM_RAW);
 
-        $mform->addElement('text', 'multfactor', get_string('multfactor', 'grades'));
-        $mform->addHelpButton('multfactor', 'multfactor', 'grades');
+        if (get_config('moodle', 'grade_multfactor_alt')) {
+            $curve_to = get_string('multfactor_alt', 'grades');
+            $perform_curve = get_string('allow_multfactor_alt', 'grades');
+
+            $mform->addElement('checkbox', 'curve_to', $perform_curve,'');
+
+            $mform->setAdvanced('curve_to');
+
+            $mform->addElement('text', 'multfactor', $curve_to);
+
+            $mform->disabledIf('curve_to', 'gradetype', 'eq', GRADE_TYPE_NONE);
+            $mform->disabledIf('curve_to', 'gradetype', 'eq', GRADE_TYPE_TEXT);
+
+            $mform->disabledIf('multfactor', 'curve_to', 'notchecked');
+            $mform->addHelpButton('multfactor', 'multfactor_alt', 'grades', null);
+        } else {
+            $mform->addElement('text', 'multfactor', get_string('multfactor', 'grades'));
+            $mform->addHelpButton('multfactor', 'multfactor', 'grades');
+        }
         $mform->setAdvanced('multfactor');
         $mform->disabledIf('multfactor', 'gradetype', 'eq', GRADE_TYPE_NONE);
         $mform->disabledIf('multfactor', 'gradetype', 'eq', GRADE_TYPE_TEXT);
@@ -225,11 +247,26 @@ class edit_item_form extends moodleform {
         $mform =& $this->_form;
 
         if ($id = $mform->getElementValue('id')) {
+
+            if ($mform->elementExists('anonymous')) {
+                $anon = grade_anonymous::fetch(array('itemid' => $id));
+
+                if ($anon) {
+                    $mform->setDefault('anonymous', 1);
+                    $mform->hardFreeze('anonymous');
+                } else {
+                    $mform->removeElement('anonymous');
+                }
+            }
+
             $grade_item = grade_item::fetch(array('id'=>$id));
 
             if (!$grade_item->is_raw_used()) {
                 $mform->removeElement('plusfactor');
                 $mform->removeElement('multfactor');
+                if ($mform->elementExists('curve_to')) {
+                    $mform->removeElement('curve_to');
+                }
             }
 
             if ($grade_item->is_outcome_item()) {
@@ -305,7 +342,7 @@ class edit_item_form extends moodleform {
             }
 
         } else {
-            // all new items are manual, children of course category
+            // all new items don't need these options
             $mform->removeElement('plusfactor');
             $mform->removeElement('multfactor');
         }
@@ -314,6 +351,12 @@ class edit_item_form extends moodleform {
         if (!$mform->elementExists('aggregationcoef') and !$mform->elementExists('parentcategory')) {
             $mform->removeElement('headerparent');
         }
+
+        // Freeze grademin element if option unavailable
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+        if ($min_is_hidden and $mform->elementExists('grademin')) {
+            $mform->hardFreeze('grademin');
+        }
     }
 
 
diff --git a/grade/edit/tree/lib.php b/grade/edit/tree/lib.php
index c05eb92..87a951f 100644
--- a/grade/edit/tree/lib.php
+++ b/grade/edit/tree/lib.php
@@ -55,6 +55,9 @@ class grade_edit_tree {
     public function __construct($gtree, $moving=false, $gpr) {
         global $USER, $OUTPUT, $COURSE;
 
+        $system_default = get_config('moodle', 'grade_report_nocalculations');
+        $this->disable_calculations = get_user_preferences('grade_report_nocalculations', $system_default);
+
         $this->gtree = $gtree;
         $this->moving = $moving;
         $this->gpr = $gpr;
@@ -138,7 +141,9 @@ class grade_edit_tree {
             $actions .= $this->gtree->get_edit_icon($element, $this->gpr);
         }
 
-        $actions .= $this->gtree->get_calculation_icon($element, $this->gpr);
+        if (!$this->disable_calculations) {
+            $actions .= $this->gtree->get_calculation_icon($element, $this->gpr);
+        }
 
         if ($element['type'] == 'item' or ($element['type'] == 'category' and $element['depth'] > 1)) {
             if ($this->element_deletable($element)) {
@@ -367,12 +372,18 @@ class grade_edit_tree {
 
         if ((($aggcoef == 'aggregationcoefweight' || $aggcoef == 'aggregationcoef') && $type == 'weight') ||
             ($aggcoef == 'aggregationcoefextraweight' && $type == 'extra')) {
+
+            if ($aggcoef == 'aggregationcoefweight' && $item->aggregationcoef < 0) {
+                return '';
+            }
+
             return '<label class="accesshide" for="aggregationcoef_'.$item->id.'">'.
                 get_string('extracreditvalue', 'grades', $item->itemname).'</label>'.
                 '<input type="text" size="6" id="aggregationcoef_'.$item->id.'" name="aggregationcoef_'.$item->id.'"
                 value="'.grade_edit_tree::format_number($item->aggregationcoef).'" />';
-        } elseif ($aggcoef == 'aggregationcoefextrasum' && $type == 'extra') {
-            $checked = ($item->aggregationcoef > 0) ? 'checked="checked"' : '';
+        } elseif (($aggcoef == 'aggregationcoefextrasum' || $aggcoef == 'aggregationcoefweight') && $type == 'extra') {
+            $valid = ($aggcoef != 'aggregationcoefweight' and $item->aggregationcoef > 0);
+            $checked = ($valid or $item->aggregationcoef < 0) ? 'checked="checked"' : '';
             return '<input type="hidden" name="extracredit_'.$item->id.'" value="0" />
                 <label class="accesshide" for="extracredit_'.$item->id.'">'.
                 get_string('extracreditvalue', 'grades', $item->itemname).'</label>
@@ -476,6 +487,7 @@ class grade_edit_tree {
         if ($element['type'] == 'category') {
             if ($coefstring == 'aggregationcoefweight') {
                 $this->uses_weight = true;
+                $this->uses_extra_credit = true;
             } elseif ($coefstring ==  'aggregationcoefextraweight' || $coefstring == 'aggregationcoefextrasum') {
                 $this->uses_extra_credit = true;
             }
@@ -793,6 +805,8 @@ class grade_edit_tree_column_range extends grade_edit_tree_column {
     public function get_item_cell($item, $params) {
         global $DB, $OUTPUT;
 
+        $this->curve_to = get_config('moodle', 'grade_multfactor_alt');
+
         // If the parent aggregation is Sum of Grades, we should show the number, even for scales, as that value is used...
         // ...in the computation. For text grades, the grademax is not used, so we can still show the no value string.
         $parent_cat = $item->get_parent_category();
@@ -812,9 +826,15 @@ class grade_edit_tree_column_range extends grade_edit_tree_column {
         } elseif ($item->is_external_item()) {
             $grademax = format_float($item->grademax, $item->get_decimals());
         } else {
-            $grademax = '<label class="accesshide" for="grademax'.$item->id.'">'.get_string('grademax', 'grades').'</label>
-                <input type="text" size="6" id="grademax'.$item->id.'" name="grademax_'.$item->id.'" value="'.
-                format_float($item->grademax, $item->get_decimals()).'" />';
+            if ($this->curve_to) {
+                $grademax = '<label class="accesshide" for="grademax'.$item->id.'">'.get_string('grademax', 'grades').'</label>
+                    <input type="text" size="6" id="grademax'.$item->id.'" class="grademax" name="grademax_'.$item->id.'" value="'.
+                    format_float($item->grademax, $item->get_decimals()).'" />';
+            } else {
+                $grademax = '<label class="accesshide" for="grademax'.$item->id.'">'.get_string('grademax', 'grades').'</label>
+                    <input type="text" size="6" id="grademax'.$item->id.'" name="grademax_'.$item->id.'" value="'.
+                    format_float($item->grademax, $item->get_decimals()).'" />';
+            }
         }
 
         $itemcell = clone($this->itemcell);
@@ -976,9 +996,13 @@ class grade_edit_tree_column_droplow extends grade_edit_tree_column_category {
     }
 
     public function get_category_cell($category, $levelclass, $params) {
-        $droplow = '<label class="accesshide" for="droplow_' . $category->id.'">' . get_string('droplowestvalue', 'grades') . '</label>';
-        $droplow .= '<input type="text" size="3" id="droplow_' . $category->id . '" name="droplow_' . $category->id . '" value="'
-                . $category->droplow.'" />';
+        // HIDE THIS
+        $disabled = '';
+        if (!empty($category->keephigh)) {
+            $disabled = 'DISABLED';
+        }
+
+        $droplow = '<input '.$disabled.' type="text" size="3" id="droplow_'.$category->id.'" name="droplow_'.$category->id.'" value="'.$category->droplow.'" />';
 
         if ($this->forced) {
             $droplow = $category->droplow;
@@ -1011,9 +1035,13 @@ class grade_edit_tree_column_keephigh extends grade_edit_tree_column_category {
     }
 
     public function get_category_cell($category, $levelclass, $params) {
-        $keephigh = '<label class="accesshide" for="keephigh_'.$category->id.'">'.get_string('keephigh', 'grades').'</label>';
-        $keephigh .= '<input type="text" size="3" id="keephigh_'.$category->id.'" name="keephigh_'.$category->id.'" value="'.
-                $category->keephigh.'" />';
+        // HIDE THIS
+        $disabled = '';
+        if (!empty($category->droplow)) {
+            $disabled = 'DISABLED';
+        }
+
+        $keephigh = '<input '.$disabled.' type="text" size="3" id="keephigh_'.$category->id.'" name="keephigh_'.$category->id.'" value="'.$category->keephigh.'" />';
 
         if ($this->forced) {
             $keephigh = $category->keephigh;
@@ -1033,15 +1061,18 @@ class grade_edit_tree_column_keephigh extends grade_edit_tree_column_category {
 }
 
 class grade_edit_tree_column_multfactor extends grade_edit_tree_column {
+    private $curve_to;
 
     public function __construct($params) {
+        $this->curve_to = get_config('moodle', 'grade_multfactor_alt');
         parent::__construct();
     }
 
     public function get_header_cell() {
         global $OUTPUT;
         $headercell = clone($this->headercell);
-        $headercell->text = get_string('multfactor', 'grades').$OUTPUT->help_icon('multfactor', 'grades');
+        $name = $this->curve_to ? 'multfactor_alt' : 'multfactor';
+        $headercell->text = get_string($name, 'grades').$OUTPUT->help_icon($name, 'grades');
         return $headercell;
     }
 
@@ -1060,12 +1091,30 @@ class grade_edit_tree_column_multfactor extends grade_edit_tree_column {
             $itemcell->text = '&nbsp;';
             return $itemcell;
         }
-        $multfactor = '<label class="accesshide" for="multfactor'.$item->id.'">'.
-                get_string('multfactorvalue', 'grades', $item->itemname).'</label>
-                <input type="text" size="4" id="multfactor'.$item->id.'" name="multfactor_'.$item->id.'" value="'.
-                grade_edit_tree::format_number($item->multfactor).'" />';
+        $size = 4;
+        $multfactor = $item->multfactor;
+
+        $params = array(
+            'type' => 'text',
+            'id' => 'multfactor'.$item->id,
+            'name' => 'multfactor_'.$item->id
+        );
+
+        if ($this->curve_to) {
+            $decimals = $item->get_decimals();
+            $size += $decimals;
+            $multfactor = format_float(($multfactor * $item->grademax), $decimals);
+            $params['class'] = 'curving';
+        } else {
+            $multfactor = grade_edit_tree::format_number($multfactor);
+        }
+
+        $params += array('size' => $size, 'value' => $multfactor);
+
+        $multfactor = html_writer::empty_tag('input', $params);
+
+        $itemcell->text .= $multfactor;
 
-        $itemcell->text = $multfactor;
         return $itemcell;
     }
 
diff --git a/grade/export/grade_export_form.php b/grade/export/grade_export_form.php
index 1772b0a..31d1dda 100644
--- a/grade/export/grade_export_form.php
+++ b/grade/export/grade_export_form.php
@@ -153,6 +153,12 @@ class grade_export_form extends moodleform {
             }
         }
 
+        if($CFG->privacy_ack) {
+            $mform->addElement('header', 'privacy_ack_header', get_string('privacy_ack', 'grades'));
+            $mform->addElement('checkbox', 'privacy_ack_required', null, get_string('privacy_ack_required', 'grades'));
+            $mform->addRule('privacy_ack_required', get_string('missing_privacy_ack_required', 'grades'), 'required');
+        }
+
         $mform->addElement('hidden', 'id', $COURSE->id);
         $mform->setType('id', PARAM_INT);
         $this->add_action_buttons(false, get_string('submit'));
diff --git a/grade/report/grader/db/install.xml b/grade/report/grader/db/install.xml
new file mode 100644
index 0000000..88af821
--- /dev/null
+++ b/grade/report/grader/db/install.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="grade/report/grader/db" VERSION="20120409" COMMENT="XMLDB file for Moodle anonymous grading"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../../lib/xmldb/xmldb.xsd">
+  <TABLES>
+    <TABLE NAME="grade_anon_items" COMMENT="Anonymous grade items" NEXT="grade_anon_grades">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="false" SEQUENCE="true" NEXT="itemid"/>
+        <FIELD NAME="itemid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" COMMENT="The Moodle grade_item id reference" PREVIOUS="id" NEXT="complete"/>
+        <FIELD NAME="complete" TYPE="int" LENGTH="1" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" COMMENT="Boolean flag to quickly determine whether or not an item is complete." PREVIOUS="itemid"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" NEXT="fk_gradeitemid"/>
+        <KEY NAME="fk_gradeitemid" TYPE="foreign-unique" FIELDS="itemid" REFTABLE="grade_items" REFFIELDS="id" PREVIOUS="primary"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="grade_anon_grades" COMMENT="Temporary grade table housing the temporary final grade and adjustment value." PREVIOUS="grade_anon_items" NEXT="grade_anon_items_history">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="anonymous_itemid"/>
+        <FIELD NAME="anonymous_itemid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="id" NEXT="userid"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="anonymous_itemid" NEXT="finalgrade"/>
+        <FIELD NAME="finalgrade" TYPE="number" LENGTH="10" NOTNULL="false" UNSIGNED="false" SEQUENCE="false" DECIMALS="5" PREVIOUS="userid" NEXT="adjust_value"/>
+        <FIELD NAME="adjust_value" TYPE="number" LENGTH="10" NOTNULL="false" UNSIGNED="false" DEFAULT="0.00000" SEQUENCE="false" DECIMALS="5" PREVIOUS="finalgrade"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" NEXT="fk_gradeitemid"/>
+        <KEY NAME="fk_gradeitemid" TYPE="foreign" FIELDS="anonymous_itemid" REFTABLE="grade_anonymous_items" REFFIELDS="id" PREVIOUS="primary" NEXT="fk_userid"/>
+        <KEY NAME="fk_userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id" PREVIOUS="fk_gradeitemid"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="grade_anon_items_history" COMMENT="History table for anonymous grading" PREVIOUS="grade_anon_grades" NEXT="grade_anon_grades_history">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="action"/>
+        <FIELD NAME="action" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="id" NEXT="oldid"/>
+        <FIELD NAME="oldid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="action" NEXT="source"/>
+        <FIELD NAME="source" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" PREVIOUS="oldid" NEXT="timemodified"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="false" UNSIGNED="true" SEQUENCE="false" PREVIOUS="source" NEXT="loggeduser"/>
+        <FIELD NAME="loggeduser" TYPE="int" LENGTH="10" NOTNULL="false" UNSIGNED="true" SEQUENCE="false" PREVIOUS="timemodified" NEXT="itemid"/>
+        <FIELD NAME="itemid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="loggeduser" NEXT="complete"/>
+        <FIELD NAME="complete" TYPE="int" LENGTH="1" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="itemid"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="gradeanonhist_act_ix" UNIQUE="false" FIELDS="action" NEXT="gradeanonhist_old_ix"/>
+        <INDEX NAME="gradeanonhist_old_ix" UNIQUE="false" FIELDS="oldid" PREVIOUS="gradeanonhist_act_ix" NEXT="gradeanonhist_log_ix"/>
+        <INDEX NAME="gradeanonhist_log_ix" UNIQUE="false" FIELDS="loggeduser" PREVIOUS="gradeanonhist_old_ix" NEXT="gradeanonhist_ite_ix"/>
+        <INDEX NAME="gradeanonhist_ite_ix" UNIQUE="false" FIELDS="itemid" PREVIOUS="gradeanonhist_log_ix"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="grade_anon_grades_history" COMMENT="Anonymous grades history table" PREVIOUS="grade_anon_items_history">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="action"/>
+        <FIELD NAME="action" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="id" NEXT="oldid"/>
+        <FIELD NAME="oldid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="action" NEXT="source"/>
+        <FIELD NAME="source" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" PREVIOUS="oldid" NEXT="timemodified"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="false" UNSIGNED="true" SEQUENCE="false" PREVIOUS="source" NEXT="loggeduser"/>
+        <FIELD NAME="loggeduser" TYPE="int" LENGTH="10" NOTNULL="false" UNSIGNED="true" SEQUENCE="false" PREVIOUS="timemodified" NEXT="anonymous_itemid"/>
+        <FIELD NAME="anonymous_itemid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="loggeduser" NEXT="userid"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="anonymous_itemid" NEXT="finalgrade"/>
+        <FIELD NAME="finalgrade" TYPE="number" LENGTH="10" NOTNULL="false" UNSIGNED="false" SEQUENCE="false" DECIMALS="5" PREVIOUS="userid" NEXT="adjust_value"/>
+        <FIELD NAME="adjust_value" TYPE="number" LENGTH="10" NOTNULL="true" UNSIGNED="false" DEFAULT="0.00000" SEQUENCE="false" DECIMALS="5" PREVIOUS="finalgrade"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="gradeanongrahist_act_ix" UNIQUE="false" FIELDS="action" NEXT="gradeanongrahist_old_ix"/>
+        <INDEX NAME="gradeanongrahist_old_ix" UNIQUE="false" FIELDS="oldid" PREVIOUS="gradeanongrahist_act_ix" NEXT="gradeanongrahist_log_ix"/>
+        <INDEX NAME="gradeanongrahist_log_ix" UNIQUE="false" FIELDS="loggeduser" PREVIOUS="gradeanongrahist_old_ix" NEXT="gradeanongrahist_ait_ix"/>
+        <INDEX NAME="gradeanongrahist_ait_ix" UNIQUE="false" FIELDS="anonymous_itemid" PREVIOUS="gradeanongrahist_log_ix"/>
+      </INDEXES>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/grade/report/grader/db/upgrade.php b/grade/report/grader/db/upgrade.php
new file mode 100644
index 0000000..9342707
--- /dev/null
+++ b/grade/report/grader/db/upgrade.php
@@ -0,0 +1,129 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Upgrade code for gradebook grader report.
+ *
+ * @package   gradereport_grader
+ * @copyright 2013 Moodle Pty Ltd (http://moodle.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+function xmldb_gradereport_grader_upgrade($oldversion) {
+    global $CFG, $DB;
+
+    $dbman = $DB->get_manager();
+
+    // Create tables to support anonymous grading.
+    if (!$dbman->table_exists('grade_anon_items')) {
+        // Define table grade_anonymous_items to be created.
+        $table = new xmldb_table('grade_anon_items');
+
+        // Adding fields to table grade_anonymous_items.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('complete', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0');
+
+        // Adding keys to table grade_anonymous_items.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+        $table->add_key('fk_gradeitemid', XMLDB_KEY_FOREIGN_UNIQUE, array('itemid'), 'grade_items', array('id'));
+
+        // Conditionally launch create table for grade_anonymous_items.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+        // Define table grade_anon_items_history to be created.
+        $table = new xmldb_table('grade_anon_items_history');
+
+        // Adding fields to table grade_anon_items_history.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('action', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('oldid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('source', XMLDB_TYPE_CHAR, '255', null, null, null, null);
+        $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null);
+        $table->add_field('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null);
+        $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('complete', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0');
+
+        // Adding keys to table grade_anon_items_history.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+
+        // Adding indexes to table grade_anon_items_history.
+        $table->add_index('gradeanonhist_act_ix', XMLDB_INDEX_NOTUNIQUE, array('action'));
+        $table->add_index('gradeanonhist_old_ix', XMLDB_INDEX_NOTUNIQUE, array('oldid'));
+        $table->add_index('gradeanonhist_log_ix', XMLDB_INDEX_NOTUNIQUE, array('loggeduser'));
+        $table->add_index('gradeanonhist_ite_ix', XMLDB_INDEX_NOTUNIQUE, array('itemid'));
+
+        // Conditionally launch create table for grade_anon_items_history.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+         // Define table grade_anonymous_grades to be created.
+        $table = new xmldb_table('grade_anon_grades');
+
+        // Adding fields to table grade_anonymous_grades.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('anonymous_itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('finalgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null);
+        $table->add_field('adjust_value', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, '0.00000');
+
+        // Adding keys to table grade_anonymous_grades.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+        $table->add_key('fk_gradeitemid', XMLDB_KEY_FOREIGN, array('anonymous_itemid'), 'grade_anonymous_items', array('id'));
+        $table->add_key('fk_userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));
+
+        // Conditionally launch create table for grade_anonymous_grades.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+         // Define table grade_anon_grades_history to be created.
+        $table = new xmldb_table('grade_anon_grades_history');
+
+        // Adding fields to table grade_anon_grades_history.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('action', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('oldid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('source', XMLDB_TYPE_CHAR, '255', null, null, null, null);
+        $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null);
+        $table->add_field('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null);
+        $table->add_field('anonymous_itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+        $table->add_field('finalgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null);
+        $table->add_field('adjust_value', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, '0.00000');
+
+        // Adding keys to table grade_anon_grades_history.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+
+        // Adding indexes to table grade_anon_grades_history.
+        $table->add_index('gradeanongrahist_act_ix', XMLDB_INDEX_NOTUNIQUE, array('action'));
+        $table->add_index('gradeanongrahist_old_ix', XMLDB_INDEX_NOTUNIQUE, array('oldid'));
+        $table->add_index('gradeanongrahist_log_ix', XMLDB_INDEX_NOTUNIQUE, array('loggeduser'));
+        $table->add_index('gradeanongrahist_ait_ix', XMLDB_INDEX_NOTUNIQUE, array('anonymous_itemid'));
+
+        // Conditionally launch create table for grade_anon_grades_history.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+        upgrade_plugin_savepoint(true, 2014060400, 'gradereport', 'grader');
+    }
+
+    return true;
+}
diff --git a/grade/report/grader/lang/en/gradereport_grader.php b/grade/report/grader/lang/en/gradereport_grader.php
index ce3aa73..0d1950c 100644
--- a/grade/report/grader/lang/en/gradereport_grader.php
+++ b/grade/report/grader/lang/en/gradereport_grader.php
@@ -34,3 +34,5 @@ $string['pluginname'] = 'Grader report';
 $string['preferences'] = 'Grader report preferences';
 $string['useractivitygrade'] = '{$a} grade';
 $string['useractivityfeedback'] = '{$a} feedback';
+$string['quick_edit'] = 'Integrate Quick Edit';
+$string['quick_edit_desc'] = 'Creates _Quick edit_ links in the grader report.';
diff --git a/grade/report/grader/lib.php b/grade/report/grader/lib.php
index c91394a..396ad66 100644
--- a/grade/report/grader/lib.php
+++ b/grade/report/grader/lib.php
@@ -95,6 +95,8 @@ class grade_report_grader extends grade_report {
      */
     protected $feedback_trunc_length = 50;
 
+    protected $weightedtotals = array();
+
     /**
      * Constructor. Sets local copies of user preferences and initialises grade_tree.
      * @param int $courseid
@@ -131,6 +133,9 @@ class grade_report_grader extends grade_report {
         // Grab the grade_tree for this course
         $this->gtree = new grade_tree($this->courseid, true, $switch, $this->collapsed, $nooutcomes);
 
+        // Load Anonymous items
+        $this->load_anonymous();
+
         $this->sortitemid = $sortitemid;
 
         // base url for sorting by first/last name
@@ -147,6 +152,9 @@ class grade_report_grader extends grade_report {
         $this->setup_groups();
         $this->setup_users();
         $this->setup_sortitemid();
+
+        $this->overridecat = (bool)get_config('moodle', 'grade_overridecat');
+
     }
 
     /**
@@ -590,6 +598,9 @@ class grade_report_grader extends grade_report {
         if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
             $colspan++;
         }
+        if ($this->get_pref('integrate_quick_edit')) {
+            $colspan++;
+        }
         $colspan += count($extrafields);
 
         $levels = count($this->gtree->levels) - 1;
@@ -614,6 +625,9 @@ class grade_report_grader extends grade_report {
         if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
             $studentheader->colspan = 2;
         }
+        if ($this->get_pref('integrate_quick_edit')) {
+            $studentheader->colspan++;
+        }
         $studentheader->text = $arrows['studentname'];
 
         $headerrow->cells[] = $studentheader;
@@ -634,11 +648,28 @@ class grade_report_grader extends grade_report {
 
         $rowclasses = array('even', 'odd');
 
+        if($this->get_pref('repeatheaders') > 0) {
+            $repeat = $this->get_pref('repeatheaders');
+        } else {
+            $repeat = $this->get_pref('repeatheaders') + 100000;
+        }
+
+        // Repeat filler
+        $repeatentries = unserialize(serialize($rows));
+        array_shift($repeatentries);
+
         $suspendedstring = null;
         foreach ($this->users as $userid => $user) {
+            if ($this->rowcount > 0 and $this->rowcount % $repeat == 0) {
+                $rows = array_merge($rows, unserialize(serialize($repeatentries)));
+            }
+
+            $this->rowcount++;
+
             $userrow = new html_table_row();
             $userrow->id = 'fixed_user_'.$userid;
-            $userrow->attributes['class'] = 'r'.$this->rowcount++.' '.$rowclasses[$this->rowcount % 2];
+            $userrow->attributes['class'] = $rowclasses[$this->rowcount % 2];
+
 
             $usercell = new html_table_cell();
             $usercell->attributes['class'] = 'user';
@@ -650,7 +681,11 @@ class grade_report_grader extends grade_report {
                 $usercell->text = $OUTPUT->user_picture($user);
             }
 
-            $usercell->text .= html_writer::link(new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $this->course->id)), fullname($user));
+            if (isset($user->alternatename)) {
+                $usercell->text .= html_writer::link(new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $this->course->id)), $user->alternatename . ' (' . $user->firstname . ') ' . $user->lastname);
+            } else {
+                $usercell->text .= html_writer::link(new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $this->course->id)), fullname($user));
+            }
 
             if (!empty($user->suspendedenrolment)) {
                 $usercell->attributes['class'] .= ' usersuspended';
@@ -665,6 +700,23 @@ class grade_report_grader extends grade_report {
 
             $userrow->cells[] = $usercell;
 
+            if ($this->get_pref('integrate_quick_edit')) {
+                $quickeditcell = new html_table_cell();
+                $quickeditcell->attributes['class'] = 'quickedituser';
+                $quickeditcell->header = true;
+                $a = new stdClass();
+                $a->user = fullname($user);
+                $strgradesforuser = get_string('gradesforuser', 'grades', $a);
+                $url = new moodle_url('/grade/report/quick_edit/index.php', array(
+                    'id' => $this->course->id,
+                    'item' => 'user',
+                    'itemid' => $user->id,
+                    'group' => $this->currentgroup
+                ));
+                $quickeditcell->text = html_writer::link($url, 'QE');
+                $userrow->cells[] = $quickeditcell;
+            }
+
             if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
                 $userreportcell = new html_table_cell();
                 $userreportcell->attributes['class'] = 'userreport';
@@ -704,7 +756,7 @@ class grade_report_grader extends grade_report {
      * @return array Array of html_table_row objects
      */
     public function get_right_rows($displayaverages) {
-        global $CFG, $USER, $OUTPUT, $DB, $PAGE;
+        global $CFG, $COURSE, $USER, $OUTPUT, $DB, $PAGE;
 
         $rows = array();
         $this->rowcount = 0;
@@ -725,6 +777,8 @@ class grade_report_grader extends grade_report {
         );
         $jsscales = array();
 
+        $render_percents = $this->get_pref('showweightedpercents');
+
         foreach ($this->gtree->get_levels() as $key => $row) {
             $headingrow = new html_table_row();
             $headingrow->attributes['class'] = 'heading_name_row';
@@ -789,17 +843,55 @@ class grade_report_grader extends grade_report {
                         $arrow = $this->get_sort_arrow('move', $sortlink);
                     }
 
-                    $headerlink = $this->gtree->get_element_header($element, true, $this->get_pref('showactivityicons'), false);
+                    $is_category_item = (
+                        $element['object']->itemtype == 'course' or
+                        $element['object']->itemtype == 'category'
+                    );
+
+                    $can_category_quick_edit = (
+                        $is_category_item and
+                        !empty($this->overridecat)
+                    );
+
+                    $can_quick_edit = (
+                        $this->get_pref('integrate_quick_edit') and
+                        (!$is_category_item or $can_category_quick_edit)
+                    );
+
+                    if ($can_quick_edit) {
+                        $is_anon = isset($this->anonymous_items[$element['object']->id]);
+
+                        $url = new moodle_url('/grade/report/quick_edit/index.php', array(
+                            'id' => $this->course->id,
+                            'item' => $is_anon ? 'anonymous' : 'grade',
+                            'itemid' => $element['object']->id,
+                           'group' => $this->currentgroup
+                        ));
+                        $link = html_writer::link($url, ' QE ');
+                        $qe_link = html_writer::tag('span', $link, array(
+                            'class' => 'quickeditgrade'
+                        ));
+                    } else {
+                        $qe_link = '';
+                    }
+
+                   $headerlink = $this->gtree->get_element_header($element, true, $this->get_pref('showactivityicons'), false);
 
                     $itemcell = new html_table_cell();
                     $itemcell->attributes['class'] = $type . ' ' . $catlevel . ' highlightable'. ' i'. $element['object']->id;
 
+                    $percents = $render_percents ?
+                        $this->get_weighted_percents($element['object']) . '<br />': '';
+
                     if ($element['object']->is_hidden()) {
                         $itemcell->attributes['class'] .= ' dimmed_text';
                     }
 
                     $itemcell->colspan = $colspan;
-                    $itemcell->text = shorten_text($headerlink) . $arrow;
+                    $itemcell->text = $qe_link;
+                    $itemcell->text .= $percents;
+                    $itemcell->text .= shorten_text($headerlink);
+                    $itemcell->text .= $arrow;
                     $itemcell->header = true;
                     $itemcell->scope = 'col';
 
@@ -836,8 +928,23 @@ class grade_report_grader extends grade_report {
 
         $rowclasses = array('even', 'odd');
 
+        if($this->get_pref('repeatheaders') > 0) {
+            $repeat = $this->get_pref('repeatheaders');
+        } else {
+            $repeat = $this->get_pref('repeatheaders') + 100000;
+        }
+
+        // Headers to repeat
+        $repeatentries = unserialize(serialize($rows));
+        array_shift($repeatentries);
+
+
         foreach ($this->users as $userid => $user) {
 
+            if ($this->rowcount > 0 and $this->rowcount % $repeat == 0) {
+                $rows = array_merge($rows, $repeatentries);
+            }
+
             if ($this->canviewhidden) {
                 $altered = array();
                 $unknown = array();
@@ -848,6 +955,7 @@ class grade_report_grader extends grade_report {
                 unset($hidingaffected);
             }
 
+            $this->rowcount++;
             $itemrow = new html_table_row();
             $itemrow->id = 'user_'.$userid;
             $itemrow->attributes['class'] = $rowclasses[$this->rowcount % 2];
@@ -882,6 +990,8 @@ class grade_report_grader extends grade_report {
                     $jsarguments['grades'][] = array('user'=>$userid, 'item'=>$itemid, 'grade'=>$gradevalforjs);
                 }
 
+                $is_anon = isset($this->anonymous_items[$itemid]);
+
                 // MDL-11274
                 // Hide grades in the grader report if the current grader doesn't have 'moodle/grade:viewhidden'
                 if (!$this->canviewhidden and $grade->is_hidden()) {
@@ -910,6 +1020,11 @@ class grade_report_grader extends grade_report {
                     $itemcell->attributes['class'] .= ' overridden';
                 }
 
+
+                if ($grade->is_excluded()) {
+                    $itemcell->attributes['class'] .= ' excluded';
+                }
+
                 if (!empty($grade->feedback)) {
                     //should we be truncating feedback? ie $short_feedback = shorten_text($feedback, $this->feedback_trunc_length);
                     $jsarguments['feedback'][] = array('user'=>$userid, 'item'=>$itemid, 'content'=>wordwrap(trim(format_string($grade->feedback, $grade->feedbackformat)),
@@ -920,8 +1035,12 @@ class grade_report_grader extends grade_report {
                     $itemcell->text .= html_writer::tag('span', get_string('excluded', 'grades'), array('class'=>'excludedfloater'));
                 }
 
+                if ($grade->is_overridden() && !$grade->is_excluded()) {
+                    $itemcell->text .= html_writer::tag('span', get_string('overridden', 'grades'), array('class'=>'excludedfloater'));
+                }
+
                 // Do not show any icons if no grade (no record in DB to match)
-                if (!$item->needsupdate and $USER->gradeediting[$this->courseid]) {
+                if (!$item->needsupdate and $USER->gradeediting[$this->courseid] and !$is_anon) {
                     $itemcell->text .= $this->get_icons($element);
                 }
 
@@ -943,7 +1062,13 @@ class grade_report_grader extends grade_report {
                 if ($item->needsupdate) {
                     $itemcell->text .= html_writer::tag('span', get_string('error'), array('class'=>"gradingerror$hidden"));
 
-                } else if ($USER->gradeediting[$this->courseid]) {
+                } else if ($USER->gradeediting[$this->courseid] and !$is_anon) {
+
+                    // Editing means user edit manual item raw
+                    if ($item->is_manual_item() and $CFG->grade_item_manual_recompute) {
+                        $gradeval = $grade->rawgrade;
+                    }
+
 
                     if ($item->scaleid && !empty($scalesarray[$item->scaleid])) {
                         $scale = $scalesarray[$item->scaleid];
@@ -1038,7 +1163,7 @@ class grade_report_grader extends grade_report {
             $rows[] = $itemrow;
         }
 
-        if ($this->get_pref('enableajax')) {
+        if ($this->get_pref('enableajax') && !grade_anonymous::is_supported($COURSE)) {
             $jsarguments['cfg']['ajaxenabled'] = true;
             $jsarguments['cfg']['scales'] = array();
             foreach ($jsscales as $scale) {
@@ -1234,14 +1359,16 @@ class grade_report_grader extends grade_report {
             $iconsrow->attributes['class'] = 'controls';
 
             foreach ($this->gtree->items as $itemid => $unused) {
+                $is_anon = isset($this->anonymous_items[$itemid]);
                 // emulate grade element
                 $item = $this->gtree->get_item($itemid);
-
                 $eid = $this->gtree->get_item_eid($item);
                 $element = $this->gtree->locate_element($eid);
                 $itemcell = new html_table_cell();
                 $itemcell->attributes['class'] = 'controls icons i'.$itemid;
-                $itemcell->text = $this->get_icons($element);
+                if (!$is_anon) {
+                    $itemcell->text = $this->get_icons($element);
+                }
                 $iconsrow->cells[] = $itemcell;
             }
             $rows[] = $iconsrow;
@@ -1354,6 +1481,7 @@ class grade_report_grader extends grade_report {
                 }
             }
 
+            $no_grade_SQL = $meanselection == 2 ? ' AND g.finalgrade > 0 ': '';
             // MDL-10875 Empty grades must be evaluated as grademin, NOT always 0
             // This query returns a count of ungraded grades (NULL finalgrade OR no matching record in grade_grades table)
             $sql = "SELECT gi.id, COUNT(DISTINCT u.id) AS count
@@ -1364,7 +1492,7 @@ class grade_report_grader extends grade_report {
                       JOIN {role_assignments} ra
                            ON ra.userid = u.id
                       LEFT OUTER JOIN {grade_grades} g
-                           ON (g.itemid = gi.id AND g.userid = u.id AND g.finalgrade IS NOT NULL)
+                           ON (g.itemid = gi.id AND g.userid = u.id AND (g.finalgrade IS NOT NULL $no_grade_SQL))
                       $groupsql
                      WHERE gi.courseid = :courseid
                            AND ra.roleid $gradebookrolessql
@@ -1400,7 +1528,7 @@ class grade_report_grader extends grade_report {
                     $ungradedcount = $ungradedcounts[$itemid]->count;
                 }
 
-                if ($meanselection == GRADE_REPORT_MEAN_GRADED) {
+                if (($meanselection == GRADE_REPORT_MEAN_GRADED) || ($meanselection == GRADE_REPORT_MEAN_GRADED_NO_ZEROS)) {
                     $meancount = $totalcount - $ungradedcount;
                 } else { // Bump up the sum by the number of ungraded items * grademin
                     $sumarray[$item->id] += $ungradedcount * $item->grademin;
@@ -1471,7 +1599,17 @@ class grade_report_grader extends grade_report {
         // Init all icons
         $editicon = '';
 
-        if ($element['type'] != 'categoryitem' && $element['type'] != 'courseitem') {
+        $editable = true;
+
+        if ($element['type'] == 'grade') {
+            $item = $element['object']->grade_item;
+
+            if ($item->is_course_item() or $item->is_category_item()) {
+                $editable = $this->overridecat;
+            }
+        }
+
+        if ($element['type'] != 'categoryitem' && $element['type'] != 'courseitem' &&$editable) {
             $editicon = $this->gtree->get_edit_icon($element, $this->gpr);
         }
 
@@ -1480,10 +1618,13 @@ class grade_report_grader extends grade_report {
         $lockunlockicon      = '';
 
         if (has_capability('moodle/grade:manage', $this->context)) {
-            if ($this->get_pref('showcalculations')) {
-                $editcalculationicon = $this->gtree->get_calculation_icon($element, $this->gpr);
+            if (!get_config('moodle', 'grade_report_nocalculations')){
+                if ($this->get_pref('showcalculations')) {
+                    $editcalculationicon = $this->gtree->get_calculation_icon($element, $this->gpr);
+                }
             }
 
+
             if ($this->get_pref('showeyecons')) {
                 $showhideicon = $this->gtree->get_hiding_icon($element, $this->gpr);
             }
@@ -1609,6 +1750,25 @@ class grade_report_grader extends grade_report {
         return $CFG->grade_report_fixedstudents;
     }
 
+    public function load_anonymous() {
+
+        if (empty($this->anonymous_items)) {
+            global $DB;
+            $sql = 'SELECT anon.* FROM {grade_items} gi, {grade_anon_items} anon
+                WHERE anon.itemid = gi.id';
+
+            $this->anonymous_items = array();
+
+            foreach ($DB->get_records_sql($sql) as $item) {
+                $this->anonymous_items[$item->itemid] =
+                    grade_anonymous::fetch(array('id' => $item->id));
+            }
+        }
+
+        return $this->anonymous_items;
+    }
+
+
     /**
      * Refactored function for generating HTML of sorting links with matching arrows.
      * Returns an array with 'studentname' and 'idnumber' as keys, with HTML ready
@@ -1631,9 +1791,9 @@ class grade_report_grader extends grade_report {
         $firstlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'firstname')), $strfirstname);
         $lastlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'lastname')), $strlastname);
 
-        $arrows['studentname'] = $lastlink;
+        $arrows['studentname'] = $firstlink;
 
-        if ($this->sortitemid === 'lastname') {
+        if ($this->sortitemid === 'firstname') {
             if ($this->sortorder == 'ASC') {
                 $arrows['studentname'] .= $iconasc;
             } else {
@@ -1641,9 +1801,9 @@ class grade_report_grader extends grade_report {
             }
         }
 
-        $arrows['studentname'] .= ' ' . $firstlink;
+        $arrows['studentname'] .= ' ' . $lastlink;
 
-        if ($this->sortitemid === 'firstname') {
+        if ($this->sortitemid === 'lastname') {
             if ($this->sortorder == 'ASC') {
                 $arrows['studentname'] .= $iconasc;
             } else {
@@ -1676,5 +1836,73 @@ class grade_report_grader extends grade_report {
     public function get_students_per_page() {
         return $this->get_pref('studentsperpage');
     }
+
+    public function get_weighted_percents($item) {
+        $parent = $item->get_parent_category();
+
+        if (!$parent or $item->is_course_item()) {
+            return '';
+        }
+
+        if ($item->is_category_item()) {
+            $parent = $parent->get_parent_category();
+        }
+
+        if (!$parent) {
+            return '';
+        }
+
+        $determine_weight = function($item) use ($parent) {
+            if ($parent->is_extracredit_used()) {
+                $discard_weight = (
+                    ($parent->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN &&
+                    $item->aggregationcoef > 0) or $item->aggregationcoef < 0 or $item->gradetype == 0 or $item->gradetype == 3
+                );
+
+                if ($discard_weight) return 0;
+            }
+
+            switch ($parent->aggregation) {
+                case GRADE_AGGREGATE_WEIGHTED_MEAN:
+                    return $item->aggregationcoef;
+                case GRADE_AGGREGATE_WEIGHTED_MEAN2:
+                    return $item->grademax - $item->grademin;
+                case GRADE_AGGREGATE_SUM:
+                    return $item->grademax;
+                default: return false;
+            }
+        };
+
+        $evaluated = $determine_weight($item);
+
+        if (empty($evaluated)) {
+            return '';
+        }
+
+        if (!isset($this->weightedtotals[$parent->id])) {
+            $total_weight = 0;
+
+            $grade_items = $parent->get_children();
+            foreach ($grade_items as $gid => $grade_item) {
+                if ($grade_item['type'] == 'category') {
+                    $item = $grade_item['object']->get_grade_item();
+                } else {
+                    $item = $grade_item['object'];
+                }
+
+                $total_weight += $determine_weight($item);
+            }
+
+            $this->weightedtotals[$parent->id] = $total_weight;
+        }
+
+        $decimals = $parent->get_grade_item()->get_decimals();
+
+        //if all weights are zero, we get div by 0 warnings...
+        $computed = $this->weightedtotals[$parent->id] == 0 ? 0 : $evaluated / $this->weightedtotals[$parent->id];
+
+        return ' (' . format_float($computed * 100, $decimals) . '%) ';
+    }
+
 }
 
diff --git a/grade/report/grader/preferences_form.php b/grade/report/grader/preferences_form.php
index ba2cb24..e9b0035 100644
--- a/grade/report/grader/preferences_form.php
+++ b/grade/report/grader/preferences_form.php
@@ -55,7 +55,10 @@ class grader_report_preferences_form extends moodleform {
         if (has_capability('moodle/grade:manage', $context)) {
 
             $preferences['prefshow'] = array();
-            $preferences['prefshow']['showcalculations']  = $checkbox_default;
+            // if no calculations setting is turned on, don't show this option
+            if(!get_config('moodle', 'grade_report_nocalculations')){
+                $preferences['prefshow']['showcalculations']  = $checkbox_default;
+            }
             $preferences['prefshow']['showeyecons']       = $checkbox_default;
             if ($canviewhidden) {
                 $preferences['prefshow']['showaverages']  = $checkbox_default;
@@ -84,7 +87,8 @@ class grader_report_preferences_form extends moodleform {
                                                                           0=>0, 1=>1, 2=>2, 3=>3, 4=>4, 5=>5);
                 $preferences['prefrows']['meanselection']  = array(GRADE_REPORT_PREFERENCE_DEFAULT => '*default*',
                                                                    GRADE_REPORT_MEAN_ALL => get_string('meanall', 'grades'),
-                                                                   GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'));
+                                                                   GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'),
+                                                                   GRADE_REPORT_MEAN_GRADED_NO_ZEROS => get_string('meangradednozeros', 'grades'));
 
                 $advanced = array_merge($advanced, array('averagesdisplaytype', 'averagesdecimalpoints'));
             }
@@ -102,6 +106,7 @@ class grader_report_preferences_form extends moodleform {
             if (has_capability('moodle/course:viewsuspendedusers', $context)) {
                 $preferences['prefgeneral']['showonlyactiveenrol'] = $checkbox_default;
             }
+            $preferences['prefgeneral']['repeatheaders'] = 'text';
             $preferences['prefgeneral']['aggregationposition'] = array(GRADE_REPORT_PREFERENCE_DEFAULT => '*default*',
                                                                        GRADE_REPORT_AGGREGATION_POSITION_FIRST => get_string('positionfirst', 'grades'),
                                                                        GRADE_REPORT_AGGREGATION_POSITION_LAST => get_string('positionlast', 'grades'));
@@ -111,6 +116,7 @@ class grader_report_preferences_form extends moodleform {
             $preferences['prefshow']['showactivityicons'] = $checkbox_default;
             $preferences['prefshow']['showranges'] = $checkbox_default;
             $preferences['prefshow']['showanalysisicon'] = $checkbox_default;
+            $preferences['prefshow']['showweightedpercents'] = $checkbox_default;
 
             if ($canviewhidden) {
                 $preferences['prefrows']['shownumberofgrades'] = $checkbox_default;
@@ -169,10 +175,14 @@ class grader_report_preferences_form extends moodleform {
                     $options[GRADE_REPORT_PREFERENCE_DEFAULT] = get_string('reportdefault', 'grades', $default);
                 }
 
-                $label = get_string($lang_string, 'grades') . $number;
+                if ($lang_string == 'integrate_quick_edit') {
+                    $label = get_string('quick_edit', 'gradereport_grader');
+                } else {
+                    $label = get_string($lang_string, 'grades') . $number;
+                }
 
                 $mform->addElement($type, $full_pref, $label, $options);
-                if ($lang_string != 'showuserimage') {
+                if ($lang_string != 'showuserimage' and $lang_string != 'integrate_quick_edit') {
                     $mform->addHelpButton($full_pref, $lang_string, 'grades');
                 }
                 $mform->setDefault($full_pref, $pref_value);
diff --git a/grade/report/grader/settings.php b/grade/report/grader/settings.php
index d1b02af..39c28ea 100644
--- a/grade/report/grader/settings.php
+++ b/grade/report/grader/settings.php
@@ -38,9 +38,18 @@ if ($ADMIN->fulltree) {
     $settings->add(new admin_setting_configcheckbox('grade_report_showonlyactiveenrol', get_string('showonlyactiveenrol', 'grades'),
                                                 get_string('showonlyactiveenrol_help', 'grades'), 1));
 
+    $settings->add(new admin_setting_configtext('grade_report_repeatheaders', get_string('repeatheaders', 'grades'),
+                                            get_string('repeatheaders_help', 'grades'), 10));
+
     $settings->add(new admin_setting_configcheckbox('grade_report_quickgrading', get_string('quickgrading', 'grades'),
                                                 get_string('quickgrading_help', 'grades'), 1));
 
+    $settings->add(new admin_setting_configcheckbox(
+        'grade_report_integrate_quick_edit',
+        get_string('quick_edit', 'gradereport_grader'),
+        get_string('quick_edit_desc', 'gradereport_grader'), 0
+    ));
+
     $settings->add(new admin_setting_configcheckbox('grade_report_showquickfeedback', get_string('quickfeedback', 'grades'),
                                                 get_string('showquickfeedback_help', 'grades'), 0));
 
@@ -50,13 +59,18 @@ if ($ADMIN->fulltree) {
     $settings->add(new admin_setting_configselect('grade_report_meanselection', get_string('meanselection', 'grades'),
                                               get_string('meanselection_help', 'grades'), GRADE_REPORT_MEAN_GRADED,
                                               array(GRADE_REPORT_MEAN_ALL => get_string('meanall', 'grades'),
-                                                    GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'))));
+                                                    GRADE_REPORT_MEAN_GRADED => get_string('meangraded', 'grades'),
+                                                    GRADE_REPORT_MEAN_GRADED_NO_ZEROS => get_string('meangradednozeros', 'grades'))));
 
     $settings->add(new admin_setting_configcheckbox('grade_report_enableajax', get_string('enableajax', 'grades'),
                                                 get_string('enableajax_help', 'grades'), 0));
 
-    $settings->add(new admin_setting_configcheckbox('grade_report_showcalculations', get_string('showcalculations', 'grades'),
+    if(!get_config('moodle', 'grade_report_nocalculations')){
+        $settings->add(new admin_setting_configcheckbox('grade_report_showcalculations', get_string('showcalculations', 'grades'),
                                                 get_string('showcalculations_help', 'grades'), 0));
+    } else {
+        $settings->add(new admin_setting_configempty('grade_report_showcalculations', get_string('showcalculations', 'grades'), get_string('showcalculationsWITH_NO_CALC_help', 'grades'), 0));
+    }
 
     $settings->add(new admin_setting_configcheckbox('grade_report_showeyecons', get_string('showeyecons', 'grades'),
                                                 get_string('showeyecons_help', 'grades'), 0));
@@ -73,6 +87,9 @@ if ($ADMIN->fulltree) {
     $settings->add(new admin_setting_configcheckbox('grade_report_showanalysisicon', get_string('showanalysisicon', 'core_grades'),
                                                 get_string('showanalysisicon_desc', 'core_grades'), 1));
 
+    $settings->add(new admin_setting_configcheckbox('grade_report_showweightedpercents', get_string('showweightedpercents', 'grades'),
+        get_string('showweightedpercents_help', 'grades'), 0));
+
     $settings->add(new admin_setting_configcheckbox('grade_report_showuserimage', get_string('showuserimage', 'grades'),
                                                 get_string('showuserimage_help', 'grades'), 1));
 
diff --git a/grade/report/grader/version.php b/grade/report/grader/version.php
index 9b31002..87ce316 100644
--- a/grade/report/grader/version.php
+++ b/grade/report/grader/version.php
@@ -24,6 +24,6 @@
 
 defined('MOODLE_INTERNAL') || die();
 
-$plugin->version   = 2014051200;        // The current plugin version (Date: YYYYMMDDXX)
+$plugin->version   = 2014051202;        // The current plugin version (Date: YYYYMMDDXX)
 $plugin->requires  = 2014050800;        // Requires this Moodle version
 $plugin->component = 'gradereport_grader'; // Full name of the plugin (used for diagnostics)
diff --git a/lang/en/grades.php b/lang/en/grades.php
index 9ea00eb..723eb00 100644
--- a/lang/en/grades.php
+++ b/lang/en/grades.php
@@ -82,8 +82,22 @@ $string['aggregationposition_help'] = 'This setting determines whether the categ
 $string['aggregationsvisible'] = 'Available aggregation types';
 $string['aggregationsvisiblehelp'] = 'Select all aggregation types that should be available. Hold down the Ctrl key to select multiple items.';
 $string['allgrades'] = 'All grades by category';
+$string['allow_multfactor_alt'] = 'Perform Curve To';
 $string['allstudents'] = 'All students';
 $string['allusers'] = 'All users';
+$string['anonymous'] = 'Anonymous';
+$string['anonymousadjusts'] = 'Anonymous adjusts +/-';
+$string['anonymousadjusts_help'] = 'In anonymous grading, final grades cannot be changed once committed. Adjustments allow changes within the specified constraints.';
+$string['anonymouscategories'] = 'Anonymous categories';
+$string['anonymouscategories_help'] = 'Anonymous grading will be limited to these course categories. If none are selected, then all categories will be allowed to use anonymous grading.';
+$string['anonymousfield'] = 'Anonymous field';
+$string['anonymousfield_help'] = 'The selected profile field will store the anonymous number. Create one [here]({$a}).';
+$string['anonymousgrading'] = 'Anonymous grading';
+$string['anonymousgrading_help'] = 'Enable anonymous grading in Moodle';
+$string['anonymousitem'] = 'Anonymous item';
+$string['anonymouslessthanmin'] = 'The adjustment entered for {$a->itemname} for {$a->username} is less than -{$a->boundary}.<br />Anonymous graded courses do not allow for unlimited grading.';
+$string['anonymousmorethanmax'] = 'The adjustment entered for {$a->itemname} for {$a->username} is more than {$a->boundary}.<br />Anonymous graded courses do not allow for unlimited grading.';
+$string['anonymousnotallowed'] = 'Directly editing anonymous grades is not allowed.';
 $string['autosort'] = 'Auto-sort';
 $string['availableidnumbers'] = 'Available ID numbers';
 $string['average'] = 'Average';
@@ -121,6 +135,8 @@ $string['componentcontrolsvisibility'] = 'Whether this grade item is hidden is c
 $string['contract'] = 'Contract category';
 $string['controls'] = 'Controls';
 $string['courseavg'] = 'Course average';
+$string['coursecateditable'] = 'Course category editable';
+$string['coursecateditable_help'] = 'Disabling will make the course category name an uneditable field.';
 $string['coursegradecategory'] = 'Course grade category';
 $string['coursegradedisplaytype'] = 'Course grade display type';
 $string['coursegradedisplayupdated'] = 'The course grade display type has been updated.';
@@ -150,6 +166,8 @@ $string['displayweighted'] = 'Display weighted grades';
 $string['dropdown'] = 'Dropdown menu';
 $string['droplow'] = 'Drop the lowest';
 $string['droplow_help'] = 'This setting enables a specified number of the lowest grades to be excluded from the aggregation.';
+$string['droplow_limit'] = 'Drop the lowest limit';
+$string['droplow_limit_help'] = 'By applying this setting, the drop setting will be ignored until the number of droppable grades are > than the drop number.';
 $string['droplowestvalue'] = 'Set drop lowest grade value';
 $string['dropped'] = 'Dropped';
 $string['dropxlowest'] = 'Drop X lowest';
@@ -262,6 +280,8 @@ $string['gradeitemadvanced'] = 'Advanced grade item options';
 $string['gradeitemadvanced_help'] = 'Select all elements that should be displayed as advanced when editing grade items.';
 $string['gradeitemislocked'] = 'This activity is locked in the gradebook. Changes that are made to grades in this activity will not be copied to the gradebook until it is unlocked.';
 $string['gradeitemlocked'] = 'Grading locked';
+$string['gradeitemmanualrecompute'] = 'Manual item recompute';
+$string['gradeitemmanualrecompute_help'] = 'Allow the gradebook to automatically adjust the raw grade boundaries when editing the real grade boundaries for Manual items.<br /><strong>When enabled, you will have the option of manipulating category totals.</strong>';
 $string['gradeitemmembersselected'] = 'Excluded from grading';
 $string['gradeitemnonmembers'] = 'Included in grading';
 $string['gradeitemremovemembers'] = 'Include in grading';
@@ -344,6 +364,8 @@ $string['changedefaults'] = 'Change defaults';
 $string['changereportdefaults'] = 'Change report defaults';
 $string['chooseaction'] = 'Choose an action ...';
 $string['choosecategory'] = 'Select category';
+$string['configgradehistorylifetimestart'] = 'What time should the cronjob that does the grade history pruning <b>start</b>? Please specify different times if there are multiple Moodles on one physical server.';
+$string['gradehistorylifetimestart'] = 'Run At';
 $string['identifier'] = 'Identify user by';
 $string['idnumbers'] = 'ID numbers';
 $string['ignore'] = 'Ignore';
@@ -393,6 +415,13 @@ $string['lettergradenonnumber'] = 'Low and/or High grade were non-numeric for';
 $string['letterpercentage'] = 'Letter (percentage)';
 $string['letterreal'] = 'Letter (real)';
 $string['letters'] = 'Letters';
+$string['letterscustompercents'] = 'Custom Percentages';
+$string['letterscustompercents_help'] = 'Allows for users to enter a value for the percents.';
+$string['lettersdefaultletters'] = 'F,D,C,B,A';
+$string['lettersnames'] = 'Letter names';
+$string['lettersname_help'] = 'This setting forces the default letter names defined with this system scale. __Note__: The default letter names are A-F.';
+$string['lettersstrictletter'] = 'Strict Letter names';
+$string['lettersstrictletter_help'] = 'This setting forces the default letter names defined with the selected Letter names.';
 $string['linkedactivity'] = 'Linked activity';
 $string['linkedactivity_help'] = 'This setting specifies an activity to which this outcome item is linked. This may be used to measure student performance on criteria not assessed by the activity grade.';
 $string['linktoactivity'] = 'Link to {$a->name} activity';
@@ -404,6 +433,8 @@ $string['locktimedate'] = 'Locked after: {$a}';
 $string['lockverbose'] = 'Lock {$a->category} {$a->itemmodule} {$a->itemname}';
 $string['lowest'] = 'Lowest';
 $string['lowgradeletter'] = 'Low';
+$string['manipulatecategories'] = 'Manipulate category totals';
+$string['manipulatecategories_help'] = 'Curve and offset category totals';
 $string['manualitem'] = 'Manual item';
 $string['mapfrom'] = 'Map from';
 $string['mappings'] = 'Grade item mappings';
@@ -412,10 +443,13 @@ $string['max'] = 'Highest';
 $string['maxgrade'] = 'Max grade';
 $string['meanall'] = 'All grades';
 $string['meangraded'] = 'Non-empty grades';
+$string['meangradednozeros'] = 'Non-empty, non-zero grades';
 $string['meanselection'] = 'Grades selected for column averages';
 $string['meanselection_help'] = 'This setting determines whether cells with no grade should be included when calculating the average (mean) for each category or grade item.';
 $string['median'] = 'Median';
 $string['min'] = 'Lowest';
+$string['minimum_hide'] = 'Hide ' . $string['grademin'] . '.';
+$string['minimum_hide_help'] = 'By default, ' . $string['grademin'] . ' is used in calculating grades and weights. By hiding this feature, ' . $string['grademin'] . ' will be zero in all value grading scenarios.';
 $string['missingscale'] = 'Scale must be selected';
 $string['mode'] = 'Mode';
 $string['modgradeerrorbadpoint'] = 'Invalid Grade Value. This must be an integer between 0 and {$a}';
@@ -431,6 +465,9 @@ $string['morethanmax'] = 'The grade entered for {$a->itemname} for {$a->username
 $string['moveselectedto'] = 'Move selected items to';
 $string['movingelement'] = 'Moving {$a}';
 $string['multfactor'] = 'Multiplicator';
+$string['multfactor_alt'] = 'Curve To';
+$string['multfactor_alt_desc'] = 'Curve To will replace the Multiplicator element on the grade item edit form. Users will instead enter a value to _Curve To_ and the Multiplicator is applied under the covers.';
+$string['multfactor_alt_help'] = 'The curve to is the value by which all the grades for this grade item will be adjusted. For example, if the curve-to is 200, and the maximum grade is 100, then all grades are adjusted by multiplying all the grades by 2.';
 $string['multfactorvalue'] = 'Multiplicator value for {$a}';
 $string['multfactor_help'] = 'The multiplicator is the factor by which all grades for this grade item will be multiplied, with a maximum value of the maximum grade. For example, if the multiplicator is 2 and the maximum grade is 100, then all grades less than 50 are multiplied by 2, and all grades 50 and above are changed to 100.';
 $string['mypreferences'] = 'My preferences';
@@ -441,6 +478,8 @@ $string['newcategory'] = 'New category';
 $string['newitem'] = 'New grade item';
 $string['newoutcomeitem'] = 'New outcome item';
 $string['no'] = 'No';
+$string['nocalculations'] = 'Disable calculations';
+$string['nocalculations_help'] = 'Do not allow custom calculations anywhere on the site, if an instructor has already created a calculation this will make it impossible for the instructor to change the calculation in the future';
 $string['nocategories'] = 'Grade categories could not be added or found for this course';
 $string['nocategoryname'] = 'No category name was given.';
 $string['nocategoryview'] = 'No category to view by';
@@ -492,6 +531,8 @@ $string['outcomesstandardavailable'] = 'Available standard outcomes';
 $string['outcomestandard'] = 'Standard outcome';
 $string['outcomestandard_help'] = 'A standard outcome is available site-wide, for all courses.';
 $string['overallaverage'] = 'Overall average';
+$string['overridecat'] = 'Edit category totals';
+$string['overridecat_help'] = 'Enabling this feature allows teachers to edit and override category totals.';
 $string['overridden'] = 'Overridden';
 $string['overridden_help'] = 'If ticked, the grade can no longer be changed from within the related activity.
 
@@ -545,6 +586,8 @@ $string['recovergradesdefault_help'] = 'By default recover old grades when re-en
 $string['regradeanyway'] = 'Regrade anyway';
 $string['removeallcoursegrades'] = 'Delete all grades';
 $string['removeallcourseitems'] = 'Delete all items and categories';
+$string['repeatheaders'] = 'Repeat Headers';
+$string['repeatheaders_help'] = 'Repeat gradebook headers after this many rows.<br />Enter 0 to disable this feature.<br />Leave blank to use the site defaults.';
 $string['report'] = 'Report';
 $string['reportdefault'] = 'Report default ({$a})';
 $string['reportplugins'] = 'Report plugins';
@@ -588,6 +631,8 @@ $string['showrange'] = 'Show ranges';
 $string['showrange_help'] = 'Show the range column?';
 $string['showweight'] = 'Show weightings';
 $string['showweight_help'] = 'Show the grade weight column?';
+$string['showweightedpercents'] = 'Show weighted percents';
+$string['showweightedpercents_help'] = "Show the item's weight in percent of a weighted category type.";
 $string['rangedecimals'] = 'Range decimal points';
 $string['rangedecimals_help'] = 'The number of decimal points to display for range.';
 $string['showactivityicons'] = 'Show activity icons';
@@ -598,6 +643,7 @@ $string['showaverages'] = 'Show column averages';
 $string['showaverages_help'] = 'If enabled, the grader report will contain an additional row displaying the average (mean) for each category and grade item.';
 $string['showcalculations'] = 'Show calculations';
 $string['showcalculations_help'] = 'If enabled, when editing is turned on, a calculator icon is shown for each grade item and category, with tool tips over calculated items and a visual indicator that a column is calculated.';
+$string['showcalculationsWITH_NO_CALC_help'] = '<strong>Calculations have been turned off in the "<a href = "' . $CFG->wwwroot . '/admin/settings.php?section=gradessettings#admin-grade_report_nocalculations">' . $string['generalsettings'] . '</a>" area</strong>. To access this setting please disable the "' . $string['nocalculations'] . '" setting.<br /><br />If "' . $string['showcalculations'] . '" is enabled and editing is turned on within the ' . $string['graderreport'] . ', a calculator icon is shown for each ' . $string['gradeitem'] . ' and ' . $string['category'] . ', with tool tips over calculated items and a visual indicator that a column is calculated.';
 $string['showeyecons'] = 'Show show/hide icons';
 $string['showeyecons_help'] = 'If enabled, when editing is turned on, a show/hide icon is shown for each grade for controlling its visibility to the student.';
 $string['showgroups'] = 'Show groups';
@@ -688,7 +734,13 @@ $string['useweighted'] = 'Use weighted';
 $string['verbosescales'] = 'Verbose scales';
 $string['viewbygroup'] = 'Group';
 $string['viewgrades'] = 'View grades';
+$string['w_ec'] = 'Weighted ' . $string['aggregationcoefextra'];
+$string['w_ec_help'] = 'By default, '.$string['aggregationcoefextra'].' items in a ' .$string['aggregateweightedmean2'].' grade category are weighted. Uncheck this option to allow extra credit items to simply add points to the aggregated category total.';
 $string['warningexcludedsum'] = 'Warning: excluding of grades is not compatible with sum aggregation.';
+$string['privacy_ack'] = 'Student privacy';
+$string['privacy_ack_help'] = 'This setting blocks anyone from downloading student grades without confirming they will comply with all laws and policies regarding student rights.';
+$string['privacy_ack_required'] = 'I understand that I am downloading FERPA protected data and will comply with FERPA and LSU\'s PS30.';
+$string['missing_privacy_ack_required'] = '<strong>Please agree to the FERPA requirements below before downloading any student data.</strong>';
 $string['weight'] = 'weight';
 $string['weightcourse'] = 'Use weighted grades for course';
 $string['weightedascending'] = 'Sort by weighted percent ascending';
diff --git a/lib/grade/constants.php b/lib/grade/constants.php
index ba9fd82..089e835 100644
--- a/lib/grade/constants.php
+++ b/lib/grade/constants.php
@@ -240,6 +240,11 @@ define('GRADE_REPORT_MEAN_ALL', 0);
 define('GRADE_REPORT_MEAN_GRADED', 1);
 
 /**
+ * GRADE_REPORT_MEAN_GRADED_NO_ZEROS - Only include grade items where the student has a grade greater than 0 when calculating the mean.
+ */
+define('GRADE_REPORT_MEAN_GRADED_NO_ZEROS', 2);
+
+/**
  * GRADE_NAVMETHOD_DROPDOWN - Display a drop down box to allow navigation within the gradebook
  */
 define('GRADE_NAVMETHOD_DROPDOWN', 0);
diff --git a/lib/grade/grade_anonymous.php b/lib/grade/grade_anonymous.php
new file mode 100644
index 0000000..2660cdb
--- /dev/null
+++ b/lib/grade/grade_anonymous.php
@@ -0,0 +1,337 @@
+<?php
+
+class grade_anonymous extends grade_object {
+    public $table = 'grade_anon_items';
+
+    public static $profileid;
+
+    var $required_fields = array('id', 'itemid', 'complete');
+
+    var $id;
+
+    var $itemid;
+
+    var $complete = false;
+
+    var $grade_item;
+
+    var $adjust_boundary;
+
+    public static function fetch($params) {
+        return grade_object::fetch_helper(
+            'grade_anon_items', 'grade_anonymous', $params
+        );
+    }
+
+    public static function fetch_all($params) {
+        return grade_object::fetch_all_helper(
+            'grade_anon_items', 'grade_anonymous', $params
+        );
+    }
+
+    public function load_item() {
+        if (empty($this->grade_item) and !empty($this->itemid)) {
+            $this->grade_item = grade_item::fetch(array('id' => $this->itemid));
+        }
+
+        return $this->grade_item;
+    }
+
+    public function load_grade($userid, $default=true) {
+        if (empty($this->itemid) or empty($this->id)) {
+            return array();
+        }
+
+        $grade = grade_anonymous_grade::fetch(array(
+            'anonymous_itemid' => $this->id,
+            'userid' => $userid
+        ));
+
+        if (!$grade and $default) {
+            $instance = new stdClass;
+
+            $instance->anonymous_itemid = $this->id;
+            $instance->userid = $userid;
+
+            $grade = new grade_anonymous_grade($instance, false);
+        }
+
+        if ($grade) {
+            // TODO: rethink db... rawgrade plus itemid?
+            $grade->anonymous_item = $this;
+            $grade->grade_item = $this->load_item();
+            $grade->itemid = $grade->grade_item->id;
+            $grade->rawgrade = $grade->finalgrade;
+        }
+
+        return $grade;
+    }
+
+    public function update_final_grade($userid, $finalgrade=false, $source=null, $feedback=false, $feedbackformat=FORMAT_MOODLE, $usermodified=null) {
+        $grade = $this->load_grade($userid);
+
+        if (!$this->is_completed()) {
+            // Clients of API should be mindful of scales; empty scale is -1
+            if ($grade->id and empty($finalgrade)) {
+                return $grade->delete($source);
+            }
+
+            $grade->finalgrade = $this->bounded_grade($finalgrade);
+            return $grade->id ? $grade->update($source) : $grade->insert($source);
+        } else {
+            $grade->adjust_value = $finalgrade ?
+                $grade->bound_adjust_value($finalgrade) : 0;
+
+            $grade->update($source);
+
+            return $this->load_item()->update_final_grade(
+                $userid, $this->bounded_grade($grade->real_grade()), $source,
+                $feedback, $feedbackformat, $usermodified
+            );
+        }
+    }
+
+    public function check_completed($real_users) {
+        global $DB;
+
+        $anon_users = $this->anonymous_users($real_users);
+
+        $real_count = count($real_users);
+
+        if (count($anon_users) != $real_count) {
+            return false;
+        }
+
+        $userids = implode(',', array_keys($real_users));
+        $select = 'userid IN (' . $userids . ') AND anonymous_itemid = :itemid';
+        $params = array('itemid' => $this->id);
+
+        $count = $DB->count_records_select('grade_anon_grades', $select, $params);
+
+        return $real_count == $count;
+    }
+
+    public function is_completed() {
+        return $this->complete;
+    }
+
+    public function set_completed($status = true) {
+        $this->complete = $status;
+        $this->update();
+
+        if ($this->complete) {
+            $grades = grade_anonymous_grade::fetch_all(array(
+                'anonymous_itemid' => $this->id
+            ));
+
+            foreach ($grades as $grade) {
+                $this->load_item()->update_final_grade(
+                    $grade->userid, $grade->real_grade()
+                );
+            }
+        } else {
+            $this->load_item()->delete_all_grades();
+        }
+    }
+
+    public function adjust_boundary() {
+        global $CFG;
+
+        if (is_null($this->adjust_boundary)) {
+            $this->adjust_boundary = (float) grade_get_setting(
+                $this->load_item()->courseid,
+                'anonymous_adjusts',
+                $CFG->grade_anonymous_adjusts
+            );
+        }
+
+        return $this->adjust_boundary;
+    }
+
+    public static function anonymous_profile() {
+        global $DB;
+
+        if (empty(self::$profileid)) {
+            $fields = $DB->get_records('user_info_field');
+
+            if (empty($fields)) {
+                debugging('No user profile fields to choose from.');
+                return false;
+            }
+
+            $fieldid = get_config('moodle', 'grade_anonymous_field');
+
+            $fieldid = empty($fieldid) ? reset($fields)->id : $fieldid;
+
+            if (!isset($fields[$fieldid])) {
+                debugging('Selected anonymous profile field does not exists.');
+                return false;
+            }
+
+            self::$profileid = $fieldid;
+        }
+
+        return self::$profileid;
+    }
+
+    public static function anonymous_users($real_users) {
+        global $DB;
+
+        $profileid = self::anonymous_profile();
+
+        if (empty($profileid)) {
+            return array();
+        }
+
+        $userids = implode(',', array_keys($real_users));
+
+        $sql = 'SELECT d.userid AS id, d.data FROM {user_info_data} d
+            WHERE d.userid IN (' . $userids.')
+              AND d.fieldid = :fieldid ORDER BY d.data' ;
+
+        $params = array('fieldid' => $profileid);
+        $anonymous_users = $DB->get_records_sql($sql, $params);
+
+        return $anonymous_users;
+    }
+
+    public static function is_supported($course) {
+        // Enabled system wide?
+        $enabled = (bool)get_config('moodle', 'grade_anonymous_grading');
+
+        $cats = explode(',', get_config('moodle', 'grade_anonymous_cats'));
+
+        $is_cat = (empty($cats) or in_array($course->category, $cats));
+
+        return ($enabled and $is_cat);
+    }
+
+    public function delete($source = null) {
+        $params = array('anonymous_itemid' => $this->id);
+
+        if ($grades = grade_anonymous_grade::fetch_all($params)) {
+            foreach ($grades as $grade) {
+                $grade->delete($source);
+            }
+        }
+        return parent::delete($source);
+    }
+
+    public function __call($name, $args) {
+        if (!method_exists($this->load_item(), $name)) {
+            print_error('anonymousnomethod', 'grades', '', $name);
+        }
+
+        return call_user_func_array(array($this->load_item(), $name), $args);
+    }
+
+    public function __get($name) {
+        if (isset($this->load_item()->$name)) {
+            return $this->load_item()->$name;
+        }
+
+        return null;
+    }
+}
+
+class grade_anonymous_grade extends grade_object {
+    public $table = 'grade_anon_grades';
+
+    var $required_fields = array(
+        'id', 'userid', 'anonymous_itemid', 'finalgrade', 'adjust_value'
+    );
+
+    var $adjust_value = 0;
+
+    var $anonymous_itemid;
+
+    var $anonymous_item;
+
+    var $userid;
+
+    var $finalgrade;
+
+    var $rawgrade;
+
+    var $itemid;
+
+    var $grade_item;
+
+    var $underlying;
+
+    public static function fetch($params) {
+        return grade_object::fetch_helper(
+            'grade_anon_grades', 'grade_anonymous_grade', $params
+        );
+    }
+
+    public static function fetch_all($params) {
+        return grade_object::fetch_all_helper(
+            'grade_anon_grades', 'grade_anonymous_grade', $params
+        );
+    }
+
+    public function load_item() {
+        if (empty($this->anonymous_item)) {
+            $params = array('id' => $this->anonymous_itemid);
+            $this->anonymous_item = grade_anonymous::fetch($params);
+        }
+
+        return $this->anonymous_item;
+    }
+
+    public function load_grade_item() {
+        if (empty($this->grade_item)) {
+            $this->grade_item = $this->load_item()->load_item();
+        }
+
+        return $this->grade_item;
+    }
+
+    public function load_grade() {
+        if ($this->load_item()->is_completed() and empty($this->underlying)) {
+            $this->underlying = grade_grade::fetch(array(
+                'userid' => $this->userid,
+                'itemid' => $this->load_item()->itemid
+            ));
+        }
+
+        return $this->underlying;
+    }
+
+    public function real_grade() {
+        return $this->finalgrade + (float)$this->adjust_value;
+    }
+
+    public function anonymous_number() {
+        global $DB;
+
+        $params = array(
+            'userid' => $this->userid,
+            'fieldid' => $this->load_item()->anonymous_profile()
+        );
+
+        return $DB->get_field('user_info_data', 'data', $params);
+    }
+
+    public function bound_adjust_value($value) {
+        $max = abs($this->load_item()->adjust_boundary());
+        $min = -1 * $max;
+
+        if ($value < $min) {
+            return $min;
+        } else if ($value > $max) {
+            return $max;
+        } else {
+            return $value;
+        }
+    }
+
+    public function __call($name, $args) {
+        if ($u = $this->load_grade() and method_exists($u, $name)) {
+            return call_user_func_array(array($u, $name), $args);
+        }
+
+        return null;
+    }
+}
diff --git a/lib/grade/grade_category.php b/lib/grade/grade_category.php
index d5a9e6d..4fdceab 100644
--- a/lib/grade/grade_category.php
+++ b/lib/grade/grade_category.php
@@ -406,6 +406,31 @@ class grade_category extends grade_object {
         $aggoutcomesdiff = $db_item->aggregateoutcomes   != $this->aggregateoutcomes;
         $aggsubcatsdiff  = $db_item->aggregatesubcats    != $this->aggregatesubcats;
 
+        $oldweighted = $db_item->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+        $newweighted = $this->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+
+        if ($aggregationdiff and ($oldweighted or $newweighted)) {
+
+            $children = $this->get_children(true);
+
+            foreach ($children as $element) {
+                $child = $element['object'];
+
+                if ($child instanceof grade_category) {
+                    $child = $child->get_grade_item();
+                }
+
+                if ($child->is_course_item() or (
+                    $db_item->is_item_extra_credit($child) and
+                    $this->is_item_extra_credit($child))) {
+                    continue;
+                }
+
+                $child->aggregationcoef = ($oldweighted) ? 0.00000 : 1.00000;
+                $child->update();
+            }
+        }
+
         return ($aggregationdiff || $keephighdiff || $droplowdiff || $aggonlygrddiff || $aggoutcomesdiff || $aggsubcatsdiff);
     }
 
@@ -569,6 +594,9 @@ class grade_category extends grade_object {
             return;
         }
 
+        // Used in grade minimizing
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+
         // normalize the grades first - all will have value 0...1
         // ungraded items are not used in aggregation
         foreach ($grade_values as $itemid=>$v) {
@@ -582,6 +610,12 @@ class grade_category extends grade_object {
                 unset($grade_values[$itemid]);
                 continue;
             }
+
+            // Force grademin if not applicable
+            if ($min_is_hidden and $items[$itemid]->gradetype != GRADE_TYPE_SCALE) {
+                $items[$itemid]->grademin = 0;
+            }
+
             $grade_values[$itemid] = grade_grade::standardise_score($v, $items[$itemid]->grademin, $items[$itemid]->grademax, 0, 1);
         }
 
@@ -614,6 +648,10 @@ class grade_category extends grade_object {
         // do the maths
         $agg_grade = $this->aggregate_values($grade_values, $items);
 
+        if ($min_is_hidden and $this->grade_item->gradetype != GRADE_TYPE_SCALE) {
+            $this->grade_item->grademin = 0;
+        }
+
         // recalculate the grade back to requested range
         $finalgrade = grade_grade::standardise_score($agg_grade, 0, 1, $this->grade_item->grademin, $this->grade_item->grademax);
 
@@ -684,14 +722,20 @@ class grade_category extends grade_object {
             case GRADE_AGGREGATE_WEIGHTED_MEAN: // Weighted average of all existing final grades, weight specified in coef
                 $weightsum = 0;
                 $sum       = 0;
+                $extrasum  = 0;
 
                 foreach ($grade_values as $itemid=>$grade_value) {
 
-                    if ($items[$itemid]->aggregationcoef <= 0) {
+                    $coef = $items[$itemid]->aggregationcoef;
+
+                    if ($coef == 0) {
                         continue;
+                    } else if ($coef < 0) {
+                        $extrasum += ($grade_value / ($this->grade_item->grademax / $items[$itemid]->grademax));
+                    } else {
+                        $weightsum += $coef;
+                        $sum       += $coef * $grade_value;
                     }
-                    $weightsum += $items[$itemid]->aggregationcoef;
-                    $sum       += $items[$itemid]->aggregationcoef * $grade_value;
                 }
 
                 if ($weightsum == 0) {
@@ -700,6 +744,7 @@ class grade_category extends grade_object {
                 } else {
                     $agg_grade = $sum / $weightsum;
                 }
+                $agg_grade += $extrasum;
                 break;
 
             case GRADE_AGGREGATE_WEIGHTED_MEAN2:
@@ -707,6 +752,9 @@ class grade_category extends grade_object {
                 // weight is the range of grade (usually grademax)
                 $weightsum = 0;
                 $sum       = null;
+                $extrasum  = 0;
+
+                $weighted_ec = get_config('moodle', 'grade_w_extra_credit');
 
                 foreach ($grade_values as $itemid=>$grade_value) {
                     $weight = $items[$itemid]->grademax - $items[$itemid]->grademin;
@@ -717,6 +765,9 @@ class grade_category extends grade_object {
 
                     if ($items[$itemid]->aggregationcoef == 0) {
                         $weightsum += $weight;
+                    } elseif (empty($weighted_ec)) {
+                        $extrasum += ($grade_value / ($this->grade_item->grademax / $items[$itemid]->grademax));
+                        continue;
                     }
                     $sum += $weight * $grade_value;
                 }
@@ -727,6 +778,7 @@ class grade_category extends grade_object {
                 } else {
                     $agg_grade = $sum / $weightsum;
                 }
+                $agg_grade += $extrasum;
                 break;
 
             case GRADE_AGGREGATE_EXTRACREDIT_MEAN: // special average
@@ -750,6 +802,7 @@ class grade_category extends grade_object {
                 } else {
                     $agg_grade = $sum / $num;
                 }
+                $agg_grade += $extrasum;
                 break;
 
             case GRADE_AGGREGATE_MEAN:    // Arithmetic average of all grade items (if ungraded aggregated, NULL counted as minimum)
@@ -788,9 +841,11 @@ class grade_category extends grade_object {
         //find max grade possible
         $maxes = array();
 
+        $notweightedmean = $this->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN;
+
         foreach ($items as $item) {
 
-            if ($item->aggregationcoef > 0) {
+            if (($notweightedmean and $item->aggregationcoef > 0) or $item->aggregationcoef < 0) {
                 // extra credit from this activity - does not affect total
                 continue;
             }
@@ -874,7 +929,16 @@ class grade_category extends grade_object {
     public function apply_limit_rules(&$grade_values, $items) {
         $extraused = $this->is_extracredit_used();
 
+        // Added for the sake of simplicity
+        $isweightedmean = $this->aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN;
+
         if (!empty($this->droplow)) {
+            $limit = (bool)get_config('moodle', 'grade_droplow_limit');
+
+            if ($limit and count($grade_values) <= $this->droplow) {
+                return;
+            }
+
             asort($grade_values, SORT_NUMERIC);
             $dropped = 0;
 
@@ -897,7 +961,8 @@ class grade_category extends grade_object {
 
                 // Find the first remaining grade item that is available to be dropped
                 foreach ($grade_keys as $gradekeyindex=>$gradekey) {
-                    if (!$extraused || $items[$gradekey]->aggregationcoef <= 0) {
+                   // Modified to make sure extra credit items are not dropped regardless of aggregation method.
+                   if (!$extraused || ($isweightedmean && $items[$gradekey]->aggregationcoef > 0) || (!$isweightedmean && $items[$gradekey]->aggregationcoef <= 0)) {
                         // Found a non-extra credit grade item that is eligible to be dropped
                         $originalindex = $gradekeyindex;
                         $founditemid = $grade_keys[$originalindex];
@@ -924,7 +989,8 @@ class grade_category extends grade_object {
                         break;
                     }
 
-                    if ($extraused && $items[$possibleitemid]->aggregationcoef > 0) {
+                    // Modified to make sure extra credit items are not dropped regardless of aggregation method.
+                    if (($extraused && ($isweightedmean && $items[$gradekey]->aggregationcoef <= 0)) || (($extraused && (!$isweightedmean && $items[$gradekey]->aggregationcoef > 0)))) {
                         // Don't drop extra credit grade items. Continue the search.
                         continue;
                     }
@@ -949,7 +1015,7 @@ class grade_category extends grade_object {
 
             foreach ($grade_values as $itemid=>$value) {
 
-                if ($extraused and $items[$itemid]->aggregationcoef > 0) {
+                if ($this->is_item_extra_credit($items[$itemid])) {
                     // we keep all extra credits
 
                 } else if ($kept < $this->keephigh) {
@@ -962,6 +1028,22 @@ class grade_category extends grade_object {
         }
     }
 
+    function is_item_extra_credit($item) {
+        $extraused = $this->is_extracredit_used();
+
+        if (!$extraused)
+            return false;
+
+        $coef = $item->aggregationcoef;
+
+        $validextra = (
+            ($this->aggregation != GRADE_AGGREGATE_WEIGHTED_MEAN && $coef > 0) ||
+            $coef < 0
+        );
+
+        return ($extraused && $validextra);
+    }
+
     /**
      * Returns true if category uses extra credit of any kind
      *
@@ -980,7 +1062,8 @@ class grade_category extends grade_object {
     public static function aggregation_uses_extracredit($aggregation) {
         return ($aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN2
              or $aggregation == GRADE_AGGREGATE_EXTRACREDIT_MEAN
-             or $aggregation == GRADE_AGGREGATE_SUM);
+             or $aggregation == GRADE_AGGREGATE_SUM
+             or $aggregation == GRADE_AGGREGATE_WEIGHTED_MEAN);
     }
 
     /**
diff --git a/lib/grade/grade_grade.php b/lib/grade/grade_grade.php
index 8763fdd..19cfd17 100644
--- a/lib/grade/grade_grade.php
+++ b/lib/grade/grade_grade.php
@@ -243,6 +243,10 @@ class grade_grade extends grade_object {
             return false;
         }
 
+        if ($grade_item->is_course_item() or $grade_item->is_category_item()) {
+            return (bool)get_config('moodle', 'grade_overridecat');
+        }
+
         return true;
     }
 
diff --git a/lib/grade/grade_item.php b/lib/grade/grade_item.php
index 3f8b273..408c2a8 100644
--- a/lib/grade/grade_item.php
+++ b/lib/grade/grade_item.php
@@ -344,6 +344,9 @@ class grade_item extends grade_object {
      * @return bool success
      */
     public function delete($source=null) {
+        if ($anon = grade_anonymous::fetch(array('itemid' => $this->id))) {
+            $anon->delete($source);
+        }
         $this->delete_all_grades($source);
         return parent::delete($source);
     }
@@ -702,6 +705,14 @@ class grade_item extends grade_object {
                     continue;
                 }
 
+                // Manual item rawgrade might be recomputed
+                if ($this->is_manual_item() and $CFG->grade_item_manual_recompute) {
+                    $maxscale = ($this->grademax / $grade->rawgrademax);
+                    $grade->rawgrademax = $this->grademax;
+                    $grade->rawgrademin = $this->grademin;
+                    $grade->rawgrade = $this->bounded_grade($grade->rawgrade);
+                }
+
                 $grade->finalgrade = $this->adjust_raw_grade($grade->rawgrade, $grade->rawgrademin, $grade->rawgrademax);
 
                 if (grade_floats_different($grade_record->finalgrade, $grade->finalgrade)) {
@@ -949,7 +960,13 @@ class grade_item extends grade_object {
      * @return bool
      */
     public function is_overridable_item() {
-        return !$this->is_outcome_item() and ($this->is_external_item() or $this->is_calculated() or $this->is_course_item() or $this->is_category_item());
+        if ($this->is_course_item() or $this->is_category_item()) {
+            $overridable = (bool) get_config('moodle', 'grade_overridecat');
+        } else {
+            $overridable = false;
+        }
+
+        return !$this->is_outcome_item() and ($this->is_external_item() or $this->is_calculated() or $overridable);
     }
 
     /**
@@ -967,7 +984,17 @@ class grade_item extends grade_object {
      * @return bool
      */
     public function is_raw_used() {
-        return ($this->is_external_item() and !$this->is_calculated() and !$this->is_outcome_item());
+        global $CFG;
+        if($CFG->manipulate_categories) {
+            $manipulatable_item = ($this->is_category_item() or $this->is_course_item());
+        } else {
+            $manipulatable_item = NULL;
+        }
+        if($CFG->grade_item_manual_recompute) {
+            return ($this->is_manual_item() or $this->is_external_item() or $manipulatable_item and !$this->is_calculated() and !$this->is_outcome_item());
+        } else {
+            return ($this->is_external_item() and !$this->is_calculated() and !$this->is_outcome_item());
+        }
     }
 
     /**
@@ -1319,7 +1346,7 @@ class grade_item extends grade_object {
      * @return mixed float or int fixed grade value
      */
     public function bounded_grade($gradevalue) {
-        global $CFG;
+        global $CFG, $COURSE;
 
         if (is_null($gradevalue)) {
             return null;
@@ -1336,14 +1363,16 @@ class grade_item extends grade_object {
         // NOTE: if you change this value you must manually reset the needsupdate flag in all grade items
         $maxcoef = isset($CFG->gradeoverhundredprocentmax) ? $CFG->gradeoverhundredprocentmax : 10; // 1000% max by default
 
-        if (!empty($CFG->unlimitedgrades)) {
-            // NOTE: if you change this value you must manually reset the needsupdate flag in all grade items
-            $grademax = $grademax * $maxcoef;
-        } else if ($this->is_category_item() or $this->is_course_item()) {
-            $category = $this->load_item_category();
-            if ($category->aggregation >= 100) {
-                // grade >100% hack
+        if (!grade_anonymous::is_supported($COURSE)) {
+            if (!empty($CFG->unlimitedgrades)) {
+                // NOTE: if you change this value you must manually reset the needsupdate flag in all grade items
                 $grademax = $grademax * $maxcoef;
+            } else if ($this->is_category_item() or $this->is_course_item()) {
+                $category = $this->load_item_category();
+                if ($category->aggregation >= 100) {
+                    // grade >100% hack
+                    $grademax = $grademax * $maxcoef;
+                }
             }
         }
 
@@ -1537,6 +1566,14 @@ class grade_item extends grade_object {
             return false;
         }
 
+        // Manual Item raw-grade support
+        if ($this->is_manual_item()) {
+            return $this->update_raw_grade(
+                $userid, $finalgrade, $source, $feedback, $feedbackformat,
+                $usermodified, null, null, $grade
+            );
+        }
+
         $oldgrade = new stdClass();
         $oldgrade->finalgrade     = $grade->finalgrade;
         $oldgrade->overridden     = $grade->overridden;
diff --git a/lib/gradelib.php b/lib/gradelib.php
index 75a6f20..22be511 100644
--- a/lib/gradelib.php
+++ b/lib/gradelib.php
@@ -32,6 +32,7 @@ require_once($CFG->libdir . '/grade/grade_item.php');
 require_once($CFG->libdir . '/grade/grade_grade.php');
 require_once($CFG->libdir . '/grade/grade_scale.php');
 require_once($CFG->libdir . '/grade/grade_outcome.php');
+require_once($CFG->libdir . '/grade/grade_anonymous.php');
 
 /////////////////////////////////////////////////////////////////////
 ///// Start of public API for communication with modules/blocks /////
@@ -694,7 +695,7 @@ function grade_format_gradevalue($value, &$grade_item, $localized=true, $display
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized);
 
         case GRADE_DISPLAY_TYPE_LETTER:
-            return grade_format_gradevalue_letter($value, $grade_item);
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized);
 
         case GRADE_DISPLAY_TYPE_REAL_PERCENTAGE:
             return grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ' (' .
@@ -702,23 +703,23 @@ function grade_format_gradevalue($value, &$grade_item, $localized=true, $display
 
         case GRADE_DISPLAY_TYPE_REAL_LETTER:
             return grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ' (' .
-                    grade_format_gradevalue_letter($value, $grade_item) . ')';
+                    grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_PERCENTAGE_REAL:
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_LETTER_REAL:
-            return grade_format_gradevalue_letter($value, $grade_item) . ' (' .
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_LETTER_PERCENTAGE:
-            return grade_format_gradevalue_letter($value, $grade_item) . ' (' .
+            return grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ' (' .
                     grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ')';
 
         case GRADE_DISPLAY_TYPE_PERCENTAGE_LETTER:
             return grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) . ' (' .
-                    grade_format_gradevalue_letter($value, $grade_item) . ')';
+                    grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) . ')';
         default:
             return '';
     }
@@ -775,7 +776,7 @@ function grade_format_gradevalue_percentage($value, $grade_item, $decimals, $loc
  * @param object $grade_item Grade item object
  * @return string
  */
-function grade_format_gradevalue_letter($value, $grade_item) {
+function grade_format_gradevalue_letter($value, $grade_item, $decimals, $localized) {
     $context = context_course::instance($grade_item->courseid, IGNORE_MISSING);
     if (!$letters = grade_get_letters($context)) {
         return ''; // no letters??
@@ -787,6 +788,7 @@ function grade_format_gradevalue_letter($value, $grade_item) {
 
     $value = grade_grade::standardise_score($value, $grade_item->grademin, $grade_item->grademax, 0, 100);
     $value = bounded_number(0, $value, 100); // just in case
+    $value = format_float($value, $decimals, $localized);
     foreach ($letters as $boundary => $letter) {
         if ($value >= $boundary) {
             return format_string($letter);
@@ -1383,15 +1385,48 @@ function grade_cron() {
     }
     $rs->close();
 
-    //TODO: do not run this cleanup every cron invocation
-    // cleanup history tables
-    if (!empty($CFG->gradehistorylifetime)) {  // value in days
-        $histlifetime = $now - ($CFG->gradehistorylifetime * 3600 * 24);
-        $tables = array('grade_outcomes_history', 'grade_categories_history', 'grade_items_history', 'grade_grades_history', 'scale_history');
-        foreach ($tables as $table) {
-            if ($DB->delete_records_select($table, "timemodified < ?", array($histlifetime))) {
-                mtrace("    Deleted old grade history records from '$table'");
+    // cleanup history tables occaisionally
+    if (!isset($CFG->gradehistorylifetime)) {  // value in days; we cannot choose a default for this
+        mtrace(sprintf("\n  [WARNING] No value set for '%s'...skipping grade history pruning.\n"
+		,get_string('gradehistorylifetime', 'grades')
+                ));
+
+    }elseif($CFG->gradehistorylifetime == 0){
+        mtrace(sprintf("\n  [INFO] Config '%s' is set to '%s'...skipping grade history pruning.\n",
+                get_string('gradehistorylifetime', 'grades'),
+                get_string('neverdeletehistory', 'grades')
+                ));
+	}else{  //we can proceed
+        require_once($CFG->dirroot.'/lib/statslib.php');
+        mtrace(sprintf("  Grade history retention policy '%s' is set to %s days\n  Checking for appropriate time"
+                , get_string('gradehistorylifetime', 'grades')
+                , $CFG->gradehistorylifetime
+                ));
+
+        //use default values quietly, if user has not set them in admin/server/cleanup
+        //@todo should we explicitly complain and tell the user that they have not set something? even though
+        //this condition SHOULD get caught when they try to run without having set a value for 'gradehistorylifetime'
+        $starthour = isset($CFG->gradehistorylifetimestarthour)   ? $CFG->gradehistorylifetimestarthour   : 10;
+        $startmin  = isset($CFG->gradehistorylifetimestartminute) ? $CFG->gradehistorylifetimestartminute : 0;
+
+        //setup time interval for cleanup to occur
+        $check_window_start = stats_get_base_daily() + $starthour*60*60 + $startmin*60;
+        $check_window_end = $check_window_start + 3600;
+
+        if ((time() > $check_window_start) && (time() < $check_window_end)) {
+            mtrace("  Begin grade history logs pruning");
+
+            $histlifetime = $now - ($CFG->gradehistorylifetime * 3600 * 24);
+            $tables = array('grade_outcomes_history', 'grade_categories_history', 'grade_items_history', 'grade_grades_history', 'scale_history');
+
+            foreach ($tables as $table) {
+                $DB->delete_records_select($table, "timemodified < ?", array($histlifetime));
+                mtrace("Deleted old grade history records from '$table'");
             }
+            mtrace("  Finished pruning grades history");
+        }else{
+            mtrace(sprintf("  NOT within the designated window for pruning grade history {%s - %s}...skipping.",
+                    strftime('%l:%M %P', $check_window_start), strftime('%l:%M %P', $check_window_end)));
         }
     }
 }
