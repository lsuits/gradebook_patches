diff --git a/admin/settings/grades.php b/admin/settings/grades.php
index 6d12d99..8eca70b 100644
--- a/admin/settings/grades.php
+++ b/admin/settings/grades.php
@@ -163,6 +163,8 @@ if (has_capability('moodle/grade:manage', $systemcontext)
                                                              'locktime' => new lang_string('locktime', 'grades'),
                                                              'aggregationcoef' => new lang_string('aggregationcoef', 'grades'),
                                                              'parentcategory' => new lang_string('parentcategory', 'grades'))));
+
+        $temp->add(new admin_setting_configcheckbox('grade_min_hide', new lang_string('minimum_hide', 'grades'), new lang_string('minimum_hide_help', 'grades'), '0'));
     }
     $ADMIN->add('grades', $temp);
 
diff --git a/grade/edit/tree/category_form.php b/grade/edit/tree/category_form.php
index ec2db5f..1208739 100644
--- a/grade/edit/tree/category_form.php
+++ b/grade/edit/tree/category_form.php
@@ -459,6 +459,11 @@ class edit_category_form extends moodleform {
                 }
             }
         }
+        // Freeze grademin element if option unavailable
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+        if ($min_is_hidden and $mform->elementExists('grade_item_grademin')) {
+            $mform->hardFreeze('grade_item_grademin');
+        }
     }
 
 /// perform extra validation before submission
diff --git a/grade/edit/tree/item_form.php b/grade/edit/tree/item_form.php
index 67c7a20..17bf4ee 100644
--- a/grade/edit/tree/item_form.php
+++ b/grade/edit/tree/item_form.php
@@ -314,6 +314,12 @@ class edit_item_form extends moodleform {
         if (!$mform->elementExists('aggregationcoef') and !$mform->elementExists('parentcategory')) {
             $mform->removeElement('headerparent');
         }
+
+        // Freeze grademin element if option unavailable
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+        if ($min_is_hidden and $mform->elementExists('grademin')) {
+            $mform->hardFreeze('grademin');
+        }
     }
 
 
diff --git a/lang/en/grades.php b/lang/en/grades.php
index 9ea00eb..f19cca1 100644
--- a/lang/en/grades.php
+++ b/lang/en/grades.php
@@ -703,3 +703,5 @@ $string['writinggradebookinfo'] = 'Writing gradebook settings';
 $string['xml'] = 'XML';
 $string['yes'] = 'Yes';
 $string['yourgrade'] = 'Your grade';
+$string['minimum_hide'] = 'Hide ' . $string['grademin'] . '.';
+$string['minimum_hide_help'] = 'By default, ' . $string['grademin'] . ' is used in calculating grades and weights. By hiding this feature, ' . $string['grademin'] . ' will be zero in all value grading scenarios.';
diff --git a/lib/grade/grade_category.php b/lib/grade/grade_category.php
index d5a9e6d..3e9a12d 100644
--- a/lib/grade/grade_category.php
+++ b/lib/grade/grade_category.php
@@ -569,6 +569,9 @@ class grade_category extends grade_object {
             return;
         }
 
+        // Used in grade minimizing
+        $min_is_hidden = (bool) get_config('moodle', 'grade_min_hide');
+
         // normalize the grades first - all will have value 0...1
         // ungraded items are not used in aggregation
         foreach ($grade_values as $itemid=>$v) {
@@ -582,6 +585,12 @@ class grade_category extends grade_object {
                 unset($grade_values[$itemid]);
                 continue;
             }
+
+            // Force grademin if not applicable
+            if ($min_is_hidden and $items[$itemid]->gradetype != GRADE_TYPE_SCALE) {
+                $items[$itemid]->grademin = 0;
+            }
+
             $grade_values[$itemid] = grade_grade::standardise_score($v, $items[$itemid]->grademin, $items[$itemid]->grademax, 0, 1);
         }
 
@@ -614,6 +623,10 @@ class grade_category extends grade_object {
         // do the maths
         $agg_grade = $this->aggregate_values($grade_values, $items);
 
+        if ($min_is_hidden and $this->grade_item->gradetype != GRADE_TYPE_SCALE) {
+            $this->grade_item->grademin = 0;
+        }
+
         // recalculate the grade back to requested range
         $finalgrade = grade_grade::standardise_score($agg_grade, 0, 1, $this->grade_item->grademin, $this->grade_item->grademax);
 
